{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/Autostaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./Mytoken.sol\";\nimport \"./Mytoken1.sol\";\nimport \"./Mytoken2.sol\";\nimport \"./Staking.sol\";\nimport \"./Restaking1.sol\";\nimport \"./Restaking2.sol\";\n\ncontract Autostaking {\n    Mytoken public myToken;\n    Mytoken1 public myToken1;\n    Mytoken2 public myToken2;\n    Staking public staking;\n    Restaking1 public restaking1;\n    Restaking2 public restaking2;\n\n    constructor(\n        Mytoken _mytoken,\n        Mytoken1 _mytoken1,\n        Mytoken2 _mytoken2,\n        Staking _staking,\n        Restaking1 _restaking1,\n        Restaking2 _restaking2\n    ) {\n        myToken = _mytoken;\n        myToken1 = _mytoken1;\n        myToken2 = _mytoken2;\n        staking = _staking;\n        restaking1 = _restaking1;\n        restaking2 = _restaking2;\n    }\n\n    // receive() external payable {}\n    // fallback() external payable {}\n    function autostaking1() public payable {\n        // Forward the received ether to the staking contract\n        (bool success, ) = address(staking).call{value: msg.value / 2}(\n            abi.encodeWithSignature(\"stake()\")\n        );\n        require(success, \"Staking failed\");\n\n        // Assuming ReStaking's stake function also requires ether\n        (success, ) = address(restaking1).call{value: msg.value / 2}(\n            abi.encodeWithSignature(\"transferTokens(uint256)\",msg.value / 2)\n        );\n        require(success, \"ReStaking failed\");\n    }\n\n\n        function autostaking2() public payable {\n        // Forward the received ether to the staking contract\n        (bool success, ) = address(staking).call{value: msg.value / 2}(\n            abi.encodeWithSignature(\"stake()\")\n        );\n        require(success, \"Staking failed\");\n\n        // Assuming ReStaking's stake function also requires ether\n        (success, ) = address(restaking2).call{value: msg.value / 2}(\n            abi.encodeWithSignature(\"transferTokens(uint256)\",msg.value / 2)\n        );\n        require(success, \"ReStaking failed\");\n    }\n\n\n\n    function mintTokensForStacker(uint256 amount) public {\n        myToken.mint(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/LiquidityPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Mytoken.sol\";\nimport \"./Mytoken1.sol\";\ncontract LiquidityPool {\n    // ERC20 token state variables\n     Mytoken public mytoken;\n    Mytoken1 public mytoken1;\n    // State variables for token reserves\n    uint256 public reserve1;\n    uint256 public reserve2;\n    // State variables for liquidity shares\n    uint256 public totalLiquidity;\n    mapping(address => uint256) public userLiquidity;\n\n    // Events\n    event MintLpToken(\n        address indexed _liquidityProvider,\n        uint256 _sharesMinted\n    );\n\n    event BurnLpToken(\n        address indexed _liquidityProvider,\n        uint256 _sharesBurned\n    );\n\n    constructor(Mytoken _token, Mytoken1 _token1) {\n        mytoken = _token;\n        mytoken1 = _token1;\n    }\n\n    // Function to get reserves\n    function getReserves()\n        public\n        view\n        returns (uint256 _reserve1, uint256 _reserve2)\n    {\n        _reserve1 = reserve1;\n        _reserve2 = reserve2;\n    }\n\n    // Internal function to mint liquidity shares\n    function _mint(address _to, uint256 _amount) private {\n        userLiquidity[_to] += _amount;\n        totalLiquidity += _amount;\n    }\n\n    // Internal function to burn liquidity shares\n    function _burn(address _from, uint256 _amount) private {\n        userLiquidity[_from] -= _amount;\n        totalLiquidity -= _amount;\n    }\n\n    // Internal function to update liquidity pool reserves\n    function _update(uint256 _reserve1, uint256 _reserve2) private {\n        reserve1 = _reserve1;\n        reserve2 = _reserve2;\n    }\n\n\n    // Function for user to swap tokens\n    // NOTE: Could possibly make this into 2 functions for gas saving\n    // function swapTokens(address _tokenIn, uint256 _amountIn)\n    //     external\n    //     returns (uint256 _amountOut)\n    // {\n    //     require(\n    //         _tokenIn == address(mytoken) || _tokenIn == address(mytoken1),\n    //         \"Invalid Token Address\"\n    //     );\n\n    //     // Retrieve the \"token in\" token\n    //     bool isToken1 = _tokenIn == address(mytoken);\n\n    //     (uint256 _reserve1, uint256 _reserve2) = getReserves();\n\n    //     (\n    //         IERC20 tokenIn,\n    //         IERC20 tokenOut,\n    //         uint256 reserveIn,\n    //         uint256 reserveOut\n    //     ) = isToken1\n    //             ? (mytoken, mytoken1, _reserve1, _reserve2)\n    //             : (mytoken1, mytoken, _reserve2, _reserve1);\n\n    //     // Transfer tokenIn to the liquity pool\n    //     require(_amountIn > 0, \"Insufficient Amount\");\n    //     tokenIn.transferFrom(msg.sender, address(this), _amountIn);\n\n    //     // Calculate tokenIn with fee of 0.2%\n    //     uint256 _amountInWithFee = (_amountIn * 998) / 1000;\n\n    //     /*\n    //     Calculate tokenOut amount using x * y = k\n    //     > (x + dx) * (y + dy) = k`\n    //     > y - dy = (xy) / (x + dx)\n    //     > dy = y - ((xy) / (x + dx))\n    //     > dy = y * (1 - (x / (x + dx)))\n    //     > dy = y * (((x + dx) / (x + dx)) - (x / (x + dx)))\n    //     > dy = y * (dx / (x + dx))\n    //     ~~~ dy = (y * dx) / (x + dx) ~~~\n    //     */\n    //     _amountOut =\n    //         (reserveOut * _amountInWithFee) /\n    //         (reserveIn + _amountInWithFee);\n\n    //     require(_amountOut < reserveOut, \"Insufficient Liquidity\");\n\n    //     // Transfer tokenOut to the user\n    //     tokenOut.transfer(msg.sender, _amountOut);\n\n    //     // Update the reserves\n    //     _update(\n    //         mytoken.balanceOf(address(this)),\n    //         mytoken1.balanceOf(address(this))\n    //     );\n    // }\n    function swaptokens2to1(uint256 _amountToken1) public {\n          require(\n            mytoken.transfer_( msg.sender, _amountToken1),\n            \"Token Transfer Failed\"\n        );\n\n        mytoken1.mint( msg.sender, _amountToken1);\n        mytoken1.burn(address(this), _amountToken1);\n            _update(\n            mytoken.balanceOf(address(this)),\n            mytoken1.balanceOf(address(this))\n        );\n    }\n\n        function swaptokens1to2(uint256 _amountToken1) public {\n          require(\n            mytoken1.transfer_( msg.sender, _amountToken1),\n            \"Token Transfer Failed\"\n        );\n\n        mytoken.mint( msg.sender, _amountToken1);\n        mytoken.burn(address(this), _amountToken1);\n            _update(\n            mytoken.balanceOf(address(this)),\n            mytoken1.balanceOf(address(this))\n        );\n    }\n\n    // Function for user to add liquidity\n    function addLiquidity(uint256 _amountToken1, uint256 _amountToken2)\n        external\n        returns (uint256 _liquidityShares)\n    {\n        // User sends both tokens to liquidity pool\n        require(\n            mytoken.transfer_( msg.sender, _amountToken1),\n            \"Token Transfer Failed\"\n        );\n        require(\n            mytoken1.transfer_( msg.sender, _amountToken2),\n            \"Token Transfer Failed\"\n        );\n\n\n        /*\n        Check if the ratio of tokens supplied is proportional\n        to reserve ratio to satisfy x * y = k for price to not\n        change if both reserves are greater than 0\n        */\n        (uint256 _reserve1, uint256 _reserve2) = getReserves();\n\n        if (_reserve1 > 0 || _reserve2 > 0) {\n            require(\n                _amountToken1 * _reserve2 == _amountToken2 * _reserve1,\n                \"Unbalanced Liquidity Provided\"\n            );\n        }\n\n        /*\n        Calculate number of liquidity shares to mint using\n        the geometric mean as a measure of liquidity. Increase\n        in liquidity is proportional to increase in shares\n        minted.\n        > S = (dx / x) * TL\n        > S = (dy / y) * TL\n        NOTE: Amount of liquidity shares minted formula is similar\n        to Uniswap V2 formula. For minting liquidity shares, we take\n        the minimum of the two values calculated to incentivize depositing\n        balanced liquidity.\n        */\n        uint256 _totalLiquidity = totalLiquidity;\n\n        if (_totalLiquidity == 0) {\n            _liquidityShares = sqrt(_amountToken1 * _amountToken2);\n        } else {\n            _liquidityShares = min(\n                ((_amountToken1 * _totalLiquidity) / _reserve1),\n                ((_amountToken2 * _totalLiquidity) / _reserve2)\n            );\n        }\n\n        require(_liquidityShares > 0, \"No Liquidity Shares Minted\");\n        // Mint shares to user\n        _mint(msg.sender, _liquidityShares);\n\n        // Update the reserves\n        _update(\n            mytoken.balanceOf(address(this)),\n            mytoken1.balanceOf(address(this))\n        );\n\n        emit MintLpToken(msg.sender, _liquidityShares);\n    }\n\n\n\n    /*\n    Function for user to remove liquidity\n    > dx = (S / TL) * x\n    > dy = (S / TL) * y\n    */\n    function removeLiquidity(uint256 _liquidityShares)\n        external\n        returns (uint256 _amountToken1, uint256 _amountToken2)\n    {\n        require(\n            userLiquidity[msg.sender] >= _liquidityShares,\n            \"Insufficient liquidity shares\"\n        );\n        // Get balance of both tokens\n        uint256 token1Balance = mytoken.balanceOf(address(this));\n        uint256 token2Balance = mytoken1.balanceOf(address(this));\n\n        uint256 _totalLiquidity = totalLiquidity;\n\n        _amountToken1 = (_liquidityShares * token1Balance) / _totalLiquidity;\n        _amountToken2 = (_liquidityShares * token2Balance) / _totalLiquidity;\n\n        require(\n            _amountToken1 > 0 && _amountToken2 > 0,\n            \"Insufficient transfer amounts\"\n        );\n\n        // Burn user liquidity shares\n        _burn(msg.sender, _liquidityShares);\n\n        // Update reserves\n        _update(token1Balance - _amountToken1, token2Balance - _amountToken2);\n\n        // Transfer tokens to user\n        mytoken.transfer(msg.sender, _amountToken1);\n        mytoken.transfer(msg.sender, _amountToken2);\n\n        emit BurnLpToken(msg.sender, _liquidityShares);\n    }\n\n    function mintMytoken() public {\n        mytoken.mint(msg.sender,100000000000000);\n    }\n\n     function mintMytoken1() public {\n        mytoken1.mint(msg.sender,100000000000000);\n    }\n\n    // Internal function to square root a value from Uniswap V2\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n\n    // Internal function to find minimum value from Uniswap V2\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x < y ? x : y;\n    }\n\n    function getReserve1() public  view  returns(uint256){\n        return reserve1;\n    }\n\n     function getReserve2() public  view  returns(uint256){\n        return reserve2;\n    }\n}"
    },
    "contracts/Mytoken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\ncontract Mytoken is ERC20 {\r\n    constructor() ERC20(\"xEthereum\", \"xETH\") {\r\n    }\r\n     function mint(address to, uint256 amount) external {\r\n        _mint(to, amount);\r\n    }\r\n     function burn(address to,uint256 amount) external {\r\n        _burn(to, amount);\r\n    }\r\n     function transfer_(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(recipient,msg.sender, amount);\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/Mytoken1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\ncontract Mytoken1 is ERC20 {\r\n    constructor() ERC20(\"xEthereum\", \"xETH\") {\r\n    }\r\n     function mint(address to, uint256 amount) external {\r\n        _mint(to, amount);\r\n    }\r\n     function burn(address to,uint256 amount) external {\r\n        _burn(to, amount);\r\n    }\r\n     function transfer_(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(recipient,msg.sender, amount);\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/Mytoken2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\ncontract Mytoken2 is ERC20 {\r\n    constructor() ERC20(\"xEthereum\", \"xETH\") {\r\n    }\r\n     function mint(address to, uint256 amount) external {\r\n        _mint(to, amount);\r\n    }\r\n     function burn(address to,uint256 amount) external {\r\n        _burn(to, amount);\r\n    }\r\n     function transfer_(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(recipient,msg.sender, amount);\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/Restaking1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"./Mytoken.sol\";\r\nimport \"./Mytoken1.sol\";\r\n\r\ncontract Restaking1 {\r\n    Mytoken public myToken;\r\n    Mytoken1 public anotherToken;\r\n    event Staked(address indexed user, uint256 indexed amount);\r\n    event WithdrewStake(address indexed user, uint256 indexed amount,uint256 indexed timestamp);\r\n    event RewardsClaimed(address indexed user, uint256 indexed amount);\r\n    event unboundingPeriodInitiated (address indexed user,uint256 indexed amount, uint256 indexed timestamp );\r\n    uint256 public RewardRate=100;\r\n    uint256 public s_totalSupply;\r\n    uint256 public s_lastUpdateTime; // everytime we call stake,withdraw,claim reward we need to update time;\r\n    uint256 public s_rewardPerTokenStored;\r\n    \r\n    //   uint256 public withdrawTimeStamp;\r\n\r\n    struct entry{\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n        bool notCompleted;\r\n    }\r\n\r\n    struct requiredData{\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n        bool claimable;\r\n    }\r\n\r\n    mapping(address => uint256) s_userStakedAmount;\r\n    mapping(address => entry[]) userData;\r\n    mapping(address => uint256) s_rewards;\r\n    mapping(address => uint256) s_userRewardsPerToken_Paid;\r\n    mapping(address => uint256) withdrawTimeStamp;\r\n    mapping (address=>uint256) public StakersBalance;\r\n\r\n\r\n    modifier updateReward() {\r\n        s_lastUpdateTime = block.timestamp;\r\n        rewardPerTokenUpdate();\r\n        s_rewardPerTokenStored = rewardPerToken();\r\n        s_rewards[msg.sender] = earned(msg.sender);\r\n        s_userRewardsPerToken_Paid[msg.sender] = s_rewardPerTokenStored;\r\n        _;\r\n    }\r\n\r\n    error stake__transferFailed();\r\n    error withdraw__transferFailed();\r\n    error claimReward__transferFailed();\r\n    error staking__needMoreThanZero();\r\n    error waitingPeriod_notCompleted();\r\n    error unstakeNot_called();\r\n\r\n    constructor(Mytoken _myToken, Mytoken1 _anotherToken) {\r\n        myToken = _myToken;\r\n        anotherToken = _anotherToken;\r\n        s_lastUpdateTime = block.timestamp;\r\n\r\n    }\r\n\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        uint256 currentBalance = s_userStakedAmount[account];\r\n        uint256 amountPaid = s_userRewardsPerToken_Paid[account]; // used while claim reward function call\r\n        uint256 currentRewardPerToken = rewardPerToken();\r\n        uint256 pastRewards = s_rewards[account];\r\n        return((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) + pastRewards;\r\n    }\r\n\r\n    function transferTokens(uint256 _amount) public  {\r\n        s_userStakedAmount[msg.sender] =\r\n        s_userStakedAmount[msg.sender] + _amount;\r\n        s_totalSupply = s_totalSupply + _amount;\r\n\r\n        // myToken.mint(address(this), _amount);\r\n        // myToken.burn(msg.sender, _amount);\r\n        try myToken.transfer_(msg.sender,_amount){\r\n            emit Staked (msg.sender,_amount);\r\n        }catch{\r\n            revert stake__transferFailed();\r\n        }\r\n        anotherToken.mint(msg.sender, _amount);\r\n    }\r\n\r\n    function rewardPerTokenUpdate() public returns (uint256){\r\n        if (s_totalSupply == 0) {\r\n            return s_rewardPerTokenStored;\r\n        }\r\n        s_rewardPerTokenStored=s_rewardPerTokenStored +\r\n            (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) /\r\n                s_totalSupply);\r\n        s_lastUpdateTime = block.timestamp;\r\n                return s_rewardPerTokenStored;\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (s_totalSupply == 0) {\r\n            return s_rewardPerTokenStored;\r\n        }\r\n        return s_rewardPerTokenStored + (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) / s_totalSupply);\r\n    } \r\n\r\n \r\n    function unstake(uint256 amount) public {\r\n        require(s_userStakedAmount[msg.sender] >=amount, \"not enough LST\");\r\n        s_userStakedAmount[msg.sender] =\r\n                s_userStakedAmount[msg.sender] -\r\n                amount;\r\n        userData[msg.sender].push(entry(block.timestamp,amount,true));    \r\n        emit unboundingPeriodInitiated(msg.sender, amount,block.timestamp);\r\n    }\r\n\r\n    function withdraw(uint256 requiredTimestamp)\r\n    payable \r\n    external\r\n    updateReward()\r\n    {   \r\n        entry[] memory user=userData[msg.sender];\r\n        uint256 userCount = userData[msg.sender].length;\r\n        entry[] memory temp = new entry[](userCount);\r\n        for(uint256 i =0 ; i < userCount; i++ ){\r\n            uint256 timestamp=user[i].timestamp;\r\n            uint256 amount = user[i].amount;\r\n            bool notCompleted = user[i].notCompleted;\r\n        if( block.timestamp-timestamp>=1000 && requiredTimestamp == timestamp && notCompleted){\r\n        try anotherToken.burn(msg.sender, amount) {\r\n            emit WithdrewStake(msg.sender, amount, block.timestamp); \r\n            withdrawTimeStamp[msg.sender] = block.timestamp;\r\n            s_totalSupply = s_totalSupply - amount;\r\n            // emit WithdrewStake(msg.sender, amount);\r\n            uint256 rpt=rewardPerToken();\r\n            amount=(amount * rpt) + amount;\r\n            myToken.mint(msg.sender, amount);\r\n            emit RewardsClaimed(msg.sender,amount);\r\n            temp[i]=entry(timestamp,amount,false);\r\n        } catch {\r\n            temp[i]=(entry(timestamp,amount,notCompleted));\r\n            emit WithdrewStake(msg.sender,amount,timestamp);\r\n            revert withdraw__transferFailed(); \r\n\r\n        }\r\n        }\r\n        else{\r\n            temp[i]=entry(timestamp,amount,notCompleted);\r\n        }\r\n        }\r\n            for(uint256 i = 0; i<userCount ; i++){\r\n                userData[msg.sender][i]=temp[i];\r\n            }\r\n    }\r\n\r\n\r\n    function getAnotherTokenBalance() public  view returns (uint256) {\r\n        return myToken.balanceOf(address(this));\r\n    }\r\n\r\n    function getUserClaimableToken() public view returns(requiredData[] memory) {\r\n    requiredData[] memory data = new requiredData[](userData[msg.sender].length);\r\n\r\n    for (uint256 i = 0; i < userData[msg.sender].length; i++) {\r\n        uint256 timestamp = userData[msg.sender][i].timestamp;\r\n        uint256 amount = userData[msg.sender][i].amount;\r\n        bool claimable = block.timestamp - timestamp >= 1000;\r\n        data[i] = requiredData(timestamp, amount, claimable);\r\n    }\r\n    \r\n    return data;\r\n    }\r\n\r\n    function mintTokensForStacker(uint256 amount) public  {\r\n            myToken.mint(msg.sender, amount);\r\n    }\r\n    function getTotalSupply() public view returns(uint256){\r\n        return s_totalSupply;\r\n    }\r\n     function getRewardsPerTokenShared() public view returns(uint256){\r\n        return s_rewardPerTokenStored;\r\n    }\r\n     function getUserBalance() public view returns(uint256){\r\n        return s_userStakedAmount[msg.sender];\r\n    }\r\n\r\n     function getUserRewardsPerToken() public view returns(uint256){\r\n        return s_userRewardsPerToken_Paid[msg.sender];\r\n    }\r\n\r\n    function getCurrentTimestamp() public view returns(uint256){\r\n        return block.timestamp;\r\n    }\r\n}"
    },
    "contracts/Restaking2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"./Mytoken.sol\";\r\nimport \"./Mytoken2.sol\";\r\n\r\ncontract Restaking2 {\r\n    Mytoken public myToken;\r\n    Mytoken2 public anotherToken;\r\n    event Staked(address indexed user, uint256 indexed amount);\r\n    event WithdrewStake(address indexed user, uint256 indexed amount,uint256 indexed timestamp);\r\n    event RewardsClaimed(address indexed user, uint256 indexed amount);\r\n    event unboundingPeriodInitiated (address indexed user,uint256 indexed amount, uint256 indexed timestamp );\r\n    uint256 public RewardRate=100;\r\n    uint256 public s_totalSupply;\r\n    uint256 public s_lastUpdateTime; // everytime we call stake,withdraw,claim reward we need to update time;\r\n    uint256 public s_rewardPerTokenStored;\r\n    \r\n    //   uint256 public withdrawTimeStamp;\r\n\r\n    struct entry{\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n        bool notCompleted;\r\n    }\r\n\r\n    struct requiredData{\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n        bool claimable;\r\n    }\r\n\r\n    mapping(address => uint256) s_userStakedAmount;\r\n    mapping(address => entry[]) userData;\r\n    mapping(address => uint256) s_rewards;\r\n    mapping(address => uint256) s_userRewardsPerToken_Paid;\r\n    mapping(address => uint256) withdrawTimeStamp;\r\n\r\n    modifier updateReward() {\r\n        s_lastUpdateTime = block.timestamp;\r\n        rewardPerTokenUpdate();\r\n        s_rewardPerTokenStored = rewardPerToken();\r\n        s_rewards[msg.sender] = earned(msg.sender);\r\n        s_userRewardsPerToken_Paid[msg.sender] = s_rewardPerTokenStored;\r\n        _;\r\n    }\r\n\r\n    error stake__transferFailed();\r\n    error withdraw__transferFailed();\r\n    error claimReward__transferFailed();\r\n    error staking__needMoreThanZero();\r\n    error waitingPeriod_notCompleted();\r\n    error unstakeNot_called();\r\n\r\n    constructor(Mytoken _myToken, Mytoken2 _anotherToken) {\r\n        myToken = _myToken;\r\n        anotherToken = _anotherToken;\r\n        s_lastUpdateTime = block.timestamp;\r\n\r\n    }\r\n\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        uint256 currentBalance = s_userStakedAmount[account];\r\n        uint256 amountPaid = s_userRewardsPerToken_Paid[account]; // used while claim reward function call\r\n        uint256 currentRewardPerToken = rewardPerToken();\r\n        uint256 pastRewards = s_rewards[account];\r\n        return((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) + pastRewards;\r\n    }\r\n\r\n    function transferTokens(uint256 _amount) public  {\r\n        s_userStakedAmount[msg.sender] =\r\n        s_userStakedAmount[msg.sender] + _amount;\r\n        s_totalSupply = s_totalSupply + _amount;\r\n\r\n        // myToken.mint(address(this), _amount);\r\n        // myToken.burn(msg.sender, _amount);\r\n        try myToken.transfer_(msg.sender,_amount){\r\n            emit Staked (msg.sender,_amount);\r\n        }catch{\r\n            revert stake__transferFailed();\r\n        }\r\n        anotherToken.mint(msg.sender, _amount);\r\n    }\r\n\r\n    function rewardPerTokenUpdate() public returns (uint256){\r\n        if (s_totalSupply == 0) {\r\n            return s_rewardPerTokenStored;\r\n        }\r\n        s_rewardPerTokenStored=s_rewardPerTokenStored +\r\n            (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) /\r\n                s_totalSupply);\r\n        s_lastUpdateTime = block.timestamp;\r\n                return s_rewardPerTokenStored;\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (s_totalSupply == 0) {\r\n            return s_rewardPerTokenStored;\r\n        }\r\n        return s_rewardPerTokenStored + (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) / s_totalSupply);\r\n    } \r\n\r\n \r\n    function unstake(uint256 amount) public {\r\n        require(s_userStakedAmount[msg.sender] >=amount, \"not enough LST\");\r\n        s_userStakedAmount[msg.sender] =\r\n                s_userStakedAmount[msg.sender] -\r\n                amount;\r\n        userData[msg.sender].push(entry(block.timestamp,amount,true));    \r\n        emit unboundingPeriodInitiated(msg.sender, amount,block.timestamp);\r\n    }\r\n\r\n    function withdraw(uint256 requiredTimestamp)\r\n    payable \r\n    external\r\n    updateReward()\r\n    {   \r\n        entry[] memory user=userData[msg.sender];\r\n        uint256 userCount = userData[msg.sender].length;\r\n        entry[] memory temp = new entry[](userCount);\r\n        for(uint256 i =0 ; i < userCount; i++ ){\r\n            uint256 timestamp=user[i].timestamp;\r\n            uint256 amount = user[i].amount;\r\n            bool notCompleted = user[i].notCompleted;\r\n        if( block.timestamp-timestamp>=1000 && requiredTimestamp == timestamp && notCompleted){\r\n        try anotherToken.burn(msg.sender, amount) {\r\n            emit WithdrewStake(msg.sender, amount, block.timestamp); \r\n            withdrawTimeStamp[msg.sender] = block.timestamp;\r\n            s_totalSupply = s_totalSupply - amount;\r\n            // emit WithdrewStake(msg.sender, amount);\r\n            uint256 rpt=rewardPerToken();\r\n            amount=(amount * rpt) + amount;\r\n            myToken.mint(msg.sender, amount);\r\n            emit RewardsClaimed(msg.sender,amount);\r\n            temp[i]=entry(timestamp,amount,false);\r\n        } catch {\r\n            temp[i]=(entry(timestamp,amount,notCompleted));\r\n            emit WithdrewStake(msg.sender,amount,timestamp);\r\n            revert withdraw__transferFailed(); \r\n\r\n        }\r\n        }\r\n        else{\r\n            temp[i]=entry(timestamp,amount,notCompleted);\r\n        }\r\n        }\r\n            for(uint256 i = 0; i<userCount ; i++){\r\n                userData[msg.sender][i]=temp[i];\r\n            }\r\n    }\r\n\r\n\r\n    function getAnotherTokenBalance() public  view returns (uint256) {\r\n        return myToken.balanceOf(address(this));\r\n    }\r\n\r\n    function getUserClaimableToken() public view returns(requiredData[] memory) {\r\n    requiredData[] memory data = new requiredData[](userData[msg.sender].length);\r\n\r\n    for (uint256 i = 0; i < userData[msg.sender].length; i++) {\r\n        uint256 timestamp = userData[msg.sender][i].timestamp;\r\n        uint256 amount = userData[msg.sender][i].amount;\r\n        bool claimable = block.timestamp - timestamp >= 1000;\r\n        data[i] = requiredData(timestamp, amount, claimable);\r\n    }\r\n    \r\n    return data;\r\n    }\r\n\r\n    function mintTokensForStacker(uint256 amount) public  {\r\n            myToken.mint(msg.sender, amount);\r\n    }\r\n    function getTotalSupply() public view returns(uint256){\r\n        return s_totalSupply;\r\n    }\r\n     function getRewardsPerTokenShared() public view returns(uint256){\r\n        return s_rewardPerTokenStored;\r\n    }\r\n     function getUserBalance() public view returns(uint256){\r\n        return s_userStakedAmount[msg.sender];\r\n    }\r\n\r\n     function getUserRewardsPerToken() public view returns(uint256){\r\n        return s_userRewardsPerToken_Paid[msg.sender];\r\n    }\r\n\r\n    function getCurrentTimestamp() public view returns(uint256){\r\n        return block.timestamp;\r\n    }\r\n}"
    },
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./Mytoken.sol\";\r\n// import \"./Token1.sol\";\r\n\r\ncontract Staking is ReentrancyGuard {\r\n    Mytoken public myToken;\r\n    //  MyToken public token;\r\n    constructor(Mytoken _token) {\r\n        myToken = _token;\r\n        s_lastUpdateTime=block.timestamp;\r\n\r\n    }\r\n    event Staked(address indexed user, uint256 indexed amount);\r\n    event WithdrewStake(address indexed user, uint256 indexed amount,uint256 indexed timstamp);\r\n    event RewardsClaimed(address indexed user, uint256 indexed amount);\r\n    event unboundingPeriodInitiated (address indexed user,uint256 indexed amount, uint256 indexed timestamp );\r\n\r\n    uint256 public RewardRate=100;\r\n    uint256 public s_totalSupply;\r\n    uint256 public s_lastUpdateTime; // everytime we call stake,withdraw,claim reward we need to update time;\r\n    uint256 public s_rewardPerTokenStored;\r\n    uint256 public unboundingPeriod = 1e18;\r\n    //   uint256 public withdrawTimeStamp;\r\n    \r\n        struct entry{\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n        bool notCompleted;\r\n    }\r\n    struct requiredData{\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n        bool claimable;\r\n    }\r\n    mapping(address => uint256) s_userStakedAmount;\r\n    mapping(address => uint256) s_rewards;\r\n    mapping(address => uint256) s_userRewardsPerToken_Paid;\r\n    mapping(address => uint256) withdrawTimeStamp;\r\n    mapping(address => entry[]) userData;\r\n\r\n\r\n    error stake__transferFailed();\r\n    error withdraw__transferFailed();\r\n    error claimReward__transferFailed();\r\n    error staking__needMoreThanZero();\r\n    error waitingPeriod_notCompleted();\r\n    error unstakeNot_called();\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n    modifier updateReward() {\r\n        s_lastUpdateTime = block.timestamp;\r\n        rewardPerTokenUpdate();\r\n        s_rewardPerTokenStored = rewardPerToken();\r\n        s_rewards[msg.sender] = earned(msg.sender);\r\n        s_userRewardsPerToken_Paid[msg.sender] = s_rewardPerTokenStored;\r\n        _;\r\n    }\r\n    function rewardPerTokenUpdate() public returns (uint256){\r\n        if (s_totalSupply == 0) {\r\n            return s_rewardPerTokenStored;\r\n        }\r\n        s_rewardPerTokenStored=s_rewardPerTokenStored +\r\n            (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) /\r\n                s_totalSupply);\r\n        s_lastUpdateTime = block.timestamp;\r\n                return s_rewardPerTokenStored;\r\n    }\r\n\r\n    modifier needMoreThanZero() {\r\n        if (msg.value == 0) {\r\n            revert staking__needMoreThanZero();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        uint256 currentBalance = s_userStakedAmount[account];\r\n        uint256 amountPaid = s_userRewardsPerToken_Paid[account]; // used while claim reward function call\r\n        uint256 currentRewardPerToken = rewardPerToken();\r\n        uint256 pastRewards = s_rewards[account];\r\n        return\r\n            ((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) +\r\n            pastRewards;\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (s_totalSupply == 0) {\r\n            return s_rewardPerTokenStored;\r\n        }\r\n        return\r\n            s_rewardPerTokenStored +\r\n            (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) /\r\n                s_totalSupply);\r\n    }\r\n\r\n    function stake()\r\n        public \r\n        updateReward()\r\n        needMoreThanZero()\r\n        nonReentrant\r\n        payable \r\n    {   uint256 amount = msg.value;\r\n        s_userStakedAmount[msg.sender] =\r\n        s_userStakedAmount[msg.sender] +\r\n            amount;\r\n        s_totalSupply = s_totalSupply + amount;\r\n        (bool sent, ) = (payable(address(this))).call{value: amount}(\"\");\r\n        require(sent, \"Failed to take ether\");\r\n        uint256 staked_tokens=(93)*(amount)/100;\r\n        myToken.mint(msg.sender, staked_tokens);\r\n\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function unstake(uint256 amount) public {\r\n        require(s_userStakedAmount[msg.sender] >=amount, \"not enough eth staked\");\r\n        s_userStakedAmount[msg.sender] =\r\n                s_userStakedAmount[msg.sender] -\r\n                amount;\r\n        userData[msg.sender].push(entry(block.timestamp,amount,true));\r\n        emit unboundingPeriodInitiated(msg.sender, amount,block.timestamp);\r\n    }\r\n\r\n\r\n    function withdraw(uint256 requiredTimestamp)\r\n        external\r\n        updateReward()\r\n        // needMoreThanZero()\r\n    {   \r\n         entry[] memory user=userData[msg.sender];\r\n        uint256 userCount = userData[msg.sender].length;\r\n        entry[] memory temp = new entry[](userCount);\r\n        for(uint256 i =0 ; i < userCount; i++ ){\r\n            uint256 timestamp=user[i].timestamp;\r\n            uint256 amount = user[i].amount;\r\n            bool notCompleted = user[i].notCompleted;\r\n        if( block.timestamp-timestamp>=10 && requiredTimestamp == timestamp && notCompleted){\r\n        withdrawTimeStamp[msg.sender] = block.timestamp;\r\n        s_totalSupply = s_totalSupply - amount;\r\n        try myToken.burn(msg.sender, amount) {\r\n            emit WithdrewStake(msg.sender, amount, block.timestamp); \r\n            withdrawTimeStamp[msg.sender] = block.timestamp;\r\n            s_totalSupply = s_totalSupply - amount;\r\n            // emit WithdrewStake(msg.sender, amount);\r\n            uint256 rpt=rewardPerToken();\r\n            amount=(amount * rpt) + amount;\r\n            amount = (amount*100)/93;\r\n            (bool sent, ) = (payable(msg.sender)).call{value: amount}(\"\");\r\n            require(sent, \"Failed to send Ether\");\r\n            emit RewardsClaimed(msg.sender,amount);\r\n        }\r\n        catch {\r\n            temp[i]=(entry(timestamp,amount,notCompleted));\r\n            revert withdraw__transferFailed(); \r\n        }\r\n        }\r\n        else{\r\n            revert unstakeNot_called();\r\n        }\r\n        }\r\n            for(uint256 i = 0; i<userCount ; i++){\r\n                userData[msg.sender][i]=temp[i];\r\n            }\r\n    }\r\n    function getUserClaimableToken() public view returns(requiredData[] memory) {\r\n        requiredData[] memory data = new requiredData[](userData[msg.sender].length);\r\n\r\n        for (uint256 i = 0; i < userData[msg.sender].length; i++) {\r\n            uint256 timestamp = userData[msg.sender][i].timestamp;\r\n            uint256 amount = userData[msg.sender][i].amount;\r\n            bool claimable = block.timestamp - timestamp >= 10;\r\n            data[i] = requiredData(timestamp, amount, claimable);\r\n    }\r\n    \r\n    return data;\r\n    }\r\n\r\n    function getTotalSupply() public view returns(uint256){\r\n        return s_totalSupply;\r\n    }\r\n    function getRewardsPerTokenShared() public view returns(uint256){\r\n        return s_rewardPerTokenStored;\r\n    }\r\n    function getBlockTimestamp() public view returns(uint256) {\r\n        return block.timestamp;\r\n    }\r\n    function getUserBalance() public view returns(uint256){\r\n        return s_userStakedAmount[msg.sender];\r\n    }\r\n    function getUserRewardsPerToken() public view returns(uint256){\r\n        return s_userRewardsPerToken_Paid[msg.sender];\r\n    }\r\n\r\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}