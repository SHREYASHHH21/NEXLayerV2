{
  "address": "0xda0E96CbcA7f4672b04f2EEF6Fc3361286b8638D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Mytoken",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract Mytoken1",
          "name": "_token1",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_liquidityProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_sharesBurned",
          "type": "uint256"
        }
      ],
      "name": "BurnLpToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_liquidityProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_sharesMinted",
          "type": "uint256"
        }
      ],
      "name": "MintLpToken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToken1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToken2",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_liquidityShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserve1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserve2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_reserve1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserve2",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintMytoken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintMytoken1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mytoken",
      "outputs": [
        {
          "internalType": "contract Mytoken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mytoken1",
      "outputs": [
        {
          "internalType": "contract Mytoken1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidityShares",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountToken1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToken2",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToken1",
          "type": "uint256"
        }
      ],
      "name": "swaptokens1to2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToken1",
          "type": "uint256"
        }
      ],
      "name": "swaptokens2to1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf70d3cfbc705a44f33ca566162d0e5849c8f39841580fac88a6044137fa19731",
  "receipt": {
    "to": null,
    "from": "0x683F19Ce012A54D60c17F1107E4c05Fd5027b4aE",
    "contractAddress": "0xda0E96CbcA7f4672b04f2EEF6Fc3361286b8638D",
    "transactionIndex": 13,
    "gasUsed": "1666234",
    "logsBloom": "0x
    "blockHash": "0x27bec460f31eb9a90435fcfa59d6d591fdafe8dfe4484ccdb19c9e475df24231",
    "transactionHash": "0xf70d3cfbc705a44f33ca566162d0e5849c8f39841580fac88a6044137fa19731",
    "logs": [],
    "blockNumber": 5643633,
    "cumulativeGasUsed": "2896729",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x466C868acb03ED465f29dbDD1643062935A37056",
    "0x15Edeb1DdAdAbAF25Aaabb4cF56614DC3Be039ee"
  ],
  "numDeployments": 1,
  "solcInputHash": "94cb5d9d6f10f001ebae633096828068",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Mytoken\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract Mytoken1\",\"name\":\"_token1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sharesBurned\",\"type\":\"uint256\"}],\"name\":\"BurnLpToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sharesMinted\",\"type\":\"uint256\"}],\"name\":\"MintLpToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToken2\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserve2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintMytoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintMytoken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mytoken\",\"outputs\":[{\"internalType\":\"contract Mytoken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mytoken1\",\"outputs\":[{\"internalType\":\"contract Mytoken1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToken2\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToken1\",\"type\":\"uint256\"}],\"name\":\"swaptokens1to2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToken1\",\"type\":\"uint256\"}],\"name\":\"swaptokens2to1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidityPool.sol\":\"LiquidityPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Mytoken.sol\\\";\\nimport \\\"./Mytoken1.sol\\\";\\ncontract LiquidityPool {\\n    // ERC20 token state variables\\n     Mytoken public mytoken;\\n    Mytoken1 public mytoken1;\\n    // State variables for token reserves\\n    uint256 public reserve1;\\n    uint256 public reserve2;\\n    // State variables for liquidity shares\\n    uint256 public totalLiquidity;\\n    mapping(address => uint256) public userLiquidity;\\n\\n    // Events\\n    event MintLpToken(\\n        address indexed _liquidityProvider,\\n        uint256 _sharesMinted\\n    );\\n\\n    event BurnLpToken(\\n        address indexed _liquidityProvider,\\n        uint256 _sharesBurned\\n    );\\n\\n    constructor(Mytoken _token, Mytoken1 _token1) {\\n        mytoken = _token;\\n        mytoken1 = _token1;\\n    }\\n\\n    // Function to get reserves\\n    function getReserves()\\n        public\\n        view\\n        returns (uint256 _reserve1, uint256 _reserve2)\\n    {\\n        _reserve1 = reserve1;\\n        _reserve2 = reserve2;\\n    }\\n\\n    // Internal function to mint liquidity shares\\n    function _mint(address _to, uint256 _amount) private {\\n        userLiquidity[_to] += _amount;\\n        totalLiquidity += _amount;\\n    }\\n\\n    // Internal function to burn liquidity shares\\n    function _burn(address _from, uint256 _amount) private {\\n        userLiquidity[_from] -= _amount;\\n        totalLiquidity -= _amount;\\n    }\\n\\n    // Internal function to update liquidity pool reserves\\n    function _update(uint256 _reserve1, uint256 _reserve2) private {\\n        reserve1 = _reserve1;\\n        reserve2 = _reserve2;\\n    }\\n\\n\\n    // Function for user to swap tokens\\n    // NOTE: Could possibly make this into 2 functions for gas saving\\n    // function swapTokens(address _tokenIn, uint256 _amountIn)\\n    //     external\\n    //     returns (uint256 _amountOut)\\n    // {\\n    //     require(\\n    //         _tokenIn == address(mytoken) || _tokenIn == address(mytoken1),\\n    //         \\\"Invalid Token Address\\\"\\n    //     );\\n\\n    //     // Retrieve the \\\"token in\\\" token\\n    //     bool isToken1 = _tokenIn == address(mytoken);\\n\\n    //     (uint256 _reserve1, uint256 _reserve2) = getReserves();\\n\\n    //     (\\n    //         IERC20 tokenIn,\\n    //         IERC20 tokenOut,\\n    //         uint256 reserveIn,\\n    //         uint256 reserveOut\\n    //     ) = isToken1\\n    //             ? (mytoken, mytoken1, _reserve1, _reserve2)\\n    //             : (mytoken1, mytoken, _reserve2, _reserve1);\\n\\n    //     // Transfer tokenIn to the liquity pool\\n    //     require(_amountIn > 0, \\\"Insufficient Amount\\\");\\n    //     tokenIn.transferFrom(msg.sender, address(this), _amountIn);\\n\\n    //     // Calculate tokenIn with fee of 0.2%\\n    //     uint256 _amountInWithFee = (_amountIn * 998) / 1000;\\n\\n    //     /*\\n    //     Calculate tokenOut amount using x * y = k\\n    //     > (x + dx) * (y + dy) = k`\\n    //     > y - dy = (xy) / (x + dx)\\n    //     > dy = y - ((xy) / (x + dx))\\n    //     > dy = y * (1 - (x / (x + dx)))\\n    //     > dy = y * (((x + dx) / (x + dx)) - (x / (x + dx)))\\n    //     > dy = y * (dx / (x + dx))\\n    //     ~~~ dy = (y * dx) / (x + dx) ~~~\\n    //     */\\n    //     _amountOut =\\n    //         (reserveOut * _amountInWithFee) /\\n    //         (reserveIn + _amountInWithFee);\\n\\n    //     require(_amountOut < reserveOut, \\\"Insufficient Liquidity\\\");\\n\\n    //     // Transfer tokenOut to the user\\n    //     tokenOut.transfer(msg.sender, _amountOut);\\n\\n    //     // Update the reserves\\n    //     _update(\\n    //         mytoken.balanceOf(address(this)),\\n    //         mytoken1.balanceOf(address(this))\\n    //     );\\n    // }\\n    function swaptokens2to1(uint256 _amountToken1) public {\\n          require(\\n            mytoken.transfer_( msg.sender, _amountToken1),\\n            \\\"Token Transfer Failed\\\"\\n        );\\n\\n        mytoken1.mint( msg.sender, _amountToken1);\\n        mytoken1.burn(address(this), _amountToken1);\\n            _update(\\n            mytoken.balanceOf(address(this)),\\n            mytoken1.balanceOf(address(this))\\n        );\\n    }\\n\\n        function swaptokens1to2(uint256 _amountToken1) public {\\n          require(\\n            mytoken1.transfer_( msg.sender, _amountToken1),\\n            \\\"Token Transfer Failed\\\"\\n        );\\n\\n        mytoken.mint( msg.sender, _amountToken1);\\n        mytoken.burn(address(this), _amountToken1);\\n            _update(\\n            mytoken.balanceOf(address(this)),\\n            mytoken1.balanceOf(address(this))\\n        );\\n    }\\n\\n    // Function for user to add liquidity\\n    function addLiquidity(uint256 _amountToken1, uint256 _amountToken2)\\n        external\\n        returns (uint256 _liquidityShares)\\n    {\\n        // User sends both tokens to liquidity pool\\n        require(\\n            mytoken.transfer_( msg.sender, _amountToken1),\\n            \\\"Token Transfer Failed\\\"\\n        );\\n        require(\\n            mytoken1.transfer_( msg.sender, _amountToken2),\\n            \\\"Token Transfer Failed\\\"\\n        );\\n\\n\\n        /*\\n        Check if the ratio of tokens supplied is proportional\\n        to reserve ratio to satisfy x * y = k for price to not\\n        change if both reserves are greater than 0\\n        */\\n        (uint256 _reserve1, uint256 _reserve2) = getReserves();\\n\\n        if (_reserve1 > 0 || _reserve2 > 0) {\\n            require(\\n                _amountToken1 * _reserve2 == _amountToken2 * _reserve1,\\n                \\\"Unbalanced Liquidity Provided\\\"\\n            );\\n        }\\n\\n        /*\\n        Calculate number of liquidity shares to mint using\\n        the geometric mean as a measure of liquidity. Increase\\n        in liquidity is proportional to increase in shares\\n        minted.\\n        > S = (dx / x) * TL\\n        > S = (dy / y) * TL\\n        NOTE: Amount of liquidity shares minted formula is similar\\n        to Uniswap V2 formula. For minting liquidity shares, we take\\n        the minimum of the two values calculated to incentivize depositing\\n        balanced liquidity.\\n        */\\n        uint256 _totalLiquidity = totalLiquidity;\\n\\n        if (_totalLiquidity == 0) {\\n            _liquidityShares = sqrt(_amountToken1 * _amountToken2);\\n        } else {\\n            _liquidityShares = min(\\n                ((_amountToken1 * _totalLiquidity) / _reserve1),\\n                ((_amountToken2 * _totalLiquidity) / _reserve2)\\n            );\\n        }\\n\\n        require(_liquidityShares > 0, \\\"No Liquidity Shares Minted\\\");\\n        // Mint shares to user\\n        _mint(msg.sender, _liquidityShares);\\n\\n        // Update the reserves\\n        _update(\\n            mytoken.balanceOf(address(this)),\\n            mytoken1.balanceOf(address(this))\\n        );\\n\\n        emit MintLpToken(msg.sender, _liquidityShares);\\n    }\\n\\n\\n\\n    /*\\n    Function for user to remove liquidity\\n    > dx = (S / TL) * x\\n    > dy = (S / TL) * y\\n    */\\n    function removeLiquidity(uint256 _liquidityShares)\\n        external\\n        returns (uint256 _amountToken1, uint256 _amountToken2)\\n    {\\n        require(\\n            userLiquidity[msg.sender] >= _liquidityShares,\\n            \\\"Insufficient liquidity shares\\\"\\n        );\\n        // Get balance of both tokens\\n        uint256 token1Balance = mytoken.balanceOf(address(this));\\n        uint256 token2Balance = mytoken1.balanceOf(address(this));\\n\\n        uint256 _totalLiquidity = totalLiquidity;\\n\\n        _amountToken1 = (_liquidityShares * token1Balance) / _totalLiquidity;\\n        _amountToken2 = (_liquidityShares * token2Balance) / _totalLiquidity;\\n\\n        require(\\n            _amountToken1 > 0 && _amountToken2 > 0,\\n            \\\"Insufficient transfer amounts\\\"\\n        );\\n\\n        // Burn user liquidity shares\\n        _burn(msg.sender, _liquidityShares);\\n\\n        // Update reserves\\n        _update(token1Balance - _amountToken1, token2Balance - _amountToken2);\\n\\n        // Transfer tokens to user\\n        mytoken.transfer(msg.sender, _amountToken1);\\n        mytoken.transfer(msg.sender, _amountToken2);\\n\\n        emit BurnLpToken(msg.sender, _liquidityShares);\\n    }\\n\\n    function mintMytoken() public {\\n        mytoken.mint(msg.sender,100000000000000);\\n    }\\n\\n     function mintMytoken1() public {\\n        mytoken1.mint(msg.sender,100000000000000);\\n    }\\n\\n    // Internal function to square root a value from Uniswap V2\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Internal function to find minimum value from Uniswap V2\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    function getReserve1() public  view  returns(uint256){\\n        return reserve1;\\n    }\\n\\n     function getReserve2() public  view  returns(uint256){\\n        return reserve2;\\n    }\\n}\",\"keccak256\":\"0x715263e279e578e3a2863f2e255e25ec6aee2a069dd1a368dfc0e271e234ab5a\",\"license\":\"MIT\"},\"contracts/Mytoken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\ncontract Mytoken is ERC20 {\\r\\n    constructor() ERC20(\\\"xEthereum\\\", \\\"xETH\\\") {\\r\\n    }\\r\\n     function mint(address to, uint256 amount) external {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n     function burn(address to,uint256 amount) external {\\r\\n        _burn(to, amount);\\r\\n    }\\r\\n     function transfer_(address recipient, uint256 amount) external returns (bool) {\\r\\n        _transfer(recipient,msg.sender, amount);\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xae803a8a705ed8928dfc2d7343c4fd0485db4541afcc9e0c7b2509ad406fb59e\",\"license\":\"MIT\"},\"contracts/Mytoken1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\ncontract Mytoken1 is ERC20 {\\r\\n    constructor() ERC20(\\\"xEthereum\\\", \\\"xETH\\\") {\\r\\n    }\\r\\n     function mint(address to, uint256 amount) external {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n     function burn(address to,uint256 amount) external {\\r\\n        _burn(to, amount);\\r\\n    }\\r\\n     function transfer_(address recipient, uint256 amount) external returns (bool) {\\r\\n        _transfer(recipient,msg.sender, amount);\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x17cd42789e56b296f5ea9206f0c4a31cc26168ea531d6a41bb3570c98f9a7576\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001e2838038062001e28833981810160405281019062000037919062000183565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001ca565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b60006200010682620000e5565b9050919050565b6200011881620000f9565b81146200012457600080fd5b50565b60008151905062000138816200010d565b92915050565b60006200014b82620000e5565b9050919050565b6200015d816200013e565b81146200016957600080fd5b50565b6000815190506200017d8162000152565b92915050565b600080604083850312156200019d576200019c620000c0565b5b6000620001ad8582860162000127565b9250506020620001c0858286016200016c565b9150509250929050565b611c4e80620001da6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80639c8f9f2311610097578063ba4c28c311610066578063ba4c28c314610242578063c5a1091714610272578063fc7410601461028e578063fcab4350146102aa576100f5565b80639c8f9f23146101b95780639cd441da146101ea578063aba7e58b1461021a578063b9abf69a14610224576100f5565b80635c0b9a2b116100d35780635c0b9a2b146101555780635eab74fc146101735780635f07d45f1461019157806390dc67e61461019b576100f5565b80630902f1ac146100fa57806315770f92146101195780635a76f25e14610137575b600080fd5b6101026102c8565b604051610110929190611531565b60405180910390f35b6101216102d9565b60405161012e919061155a565b60405180910390f35b61013f6102df565b60405161014c919061155a565b60405180910390f35b61015d6102e5565b60405161016a919061155a565b60405180910390f35b61017b6102eb565b60405161018891906115f4565b60405180910390f35b61019961030f565b005b6101a36103a4565b6040516101b0919061155a565b60405180910390f35b6101d360048036038101906101ce9190611640565b6103ae565b6040516101e1929190611531565b60405180910390f35b61020460048036038101906101ff919061166d565b6107b8565b604051610211919061155a565b60405180910390f35b610222610c38565b005b61022c610ccf565b60405161023991906116ce565b60405180910390f35b61025c60048036038101906102579190611727565b610cf5565b604051610269919061155a565b60405180910390f35b61028c60048036038101906102879190611640565b610d0d565b005b6102a860048036038101906102a39190611640565b611049565b005b6102b2611383565b6040516102bf919061155a565b60405180910390f35b600080600254915060035490509091565b60045481565b60025481565b60035481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933655af3107a40006040518363ffffffff1660e01b815260040161037092919061179e565b600060405180830381600087803b15801561038a57600080fd5b505af115801561039e573d6000803e3d6000fd5b50505050565b6000600254905090565b60008082600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042a90611824565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161048f9190611844565b602060405180830381865afa1580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d09190611874565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161052f9190611844565b602060405180830381865afa15801561054c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105709190611874565b90506000600454905080838761058691906118d0565b6105909190611941565b945080828761059f91906118d0565b6105a99190611941565b93506000851180156105bb5750600084115b6105fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f1906119be565b60405180910390fd5b610604338761138d565b610624858461061391906119de565b858461061f91906119de565b611400565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff1660e01b815260040161067f929190611a12565b6020604051808303816000875af115801561069e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c29190611a73565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b815260040161071e929190611a12565b6020604051808303816000875af115801561073d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107619190611a73565b503373ffffffffffffffffffffffffffffffffffffffff167fcb69be6f06914cd72d42e18a286e6ea41d64fa0e34ba87c4002d28c4c493522a876040516107a8919061155a565b60405180910390a2505050915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633158aa7f33856040518363ffffffff1660e01b8152600401610816929190611a12565b6020604051808303816000875af1158015610835573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108599190611a73565b610898576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088f90611aec565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633158aa7f33846040518363ffffffff1660e01b81526004016108f5929190611a12565b6020604051808303816000875af1158015610914573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109389190611a73565b610977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096e90611aec565b60405180910390fd5b6000806109826102c8565b9150915060008211806109955750600081115b156109f35781846109a691906118d0565b81866109b291906118d0565b146109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e990611b58565b60405180910390fd5b5b6000600454905060008103610a1d57610a168587610a1191906118d0565b611412565b9350610a56565b610a53838288610a2d91906118d0565b610a379190611941565b838388610a4491906118d0565b610a4e9190611941565b61148c565b93505b60008411610a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9090611bc4565b60405180910390fd5b610aa333856114a5565b610be160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610aff9190611844565b602060405180830381865afa158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190611874565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b9b9190611844565b602060405180830381865afa158015610bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdc9190611874565b611400565b3373ffffffffffffffffffffffffffffffffffffffff167f9ce434f8c25ca029d1f79dd217b13223ff3c5eddc4bed0a34d004f56a854df7f85604051610c27919061155a565b60405180910390a250505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933655af3107a40006040518363ffffffff1660e01b8152600401610c9b92919061179e565b600060405180830381600087803b158015610cb557600080fd5b505af1158015610cc9573d6000803e3d6000fd5b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633158aa7f33836040518363ffffffff1660e01b8152600401610d68929190611a12565b6020604051808303816000875af1158015610d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dab9190611a73565b610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de190611aec565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610e47929190611a12565b600060405180830381600087803b158015610e6157600080fd5b505af1158015610e75573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac30836040518363ffffffff1660e01b8152600401610ed6929190611a12565b600060405180830381600087803b158015610ef057600080fd5b505af1158015610f04573d6000803e3d6000fd5b5050505061104660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f649190611844565b602060405180830381865afa158015610f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa59190611874565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110009190611844565b602060405180830381865afa15801561101d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110419190611874565b611400565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633158aa7f33836040518363ffffffff1660e01b81526004016110a6929190611a12565b6020604051808303816000875af11580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e99190611a73565b611128576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111f90611aec565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401611183929190611a12565b600060405180830381600087803b15801561119d57600080fd5b505af11580156111b1573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac30836040518363ffffffff1660e01b8152600401611210929190611a12565b600060405180830381600087803b15801561122a57600080fd5b505af115801561123e573d6000803e3d6000fd5b5050505061138060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161129e9190611844565b602060405180830381865afa1580156112bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112df9190611874565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161133a9190611844565b602060405180830381865afa158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b9190611874565b611400565b50565b6000600354905090565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113dc91906119de565b9250508190555080600460008282546113f591906119de565b925050819055505050565b81600281905550806003819055505050565b6000600382111561147957819050600060016002846114319190611941565b61143b9190611be4565b90505b818110156114735780915060028182856114589190611941565b6114629190611be4565b61146c9190611941565b905061143e565b50611487565b6000821461148657600190505b5b919050565b600081831061149b578161149d565b825b905092915050565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114f49190611be4565b92505081905550806004600082825461150d9190611be4565b925050819055505050565b6000819050919050565b61152b81611518565b82525050565b60006040820190506115466000830185611522565b6115536020830184611522565b9392505050565b600060208201905061156f6000830184611522565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006115ba6115b56115b084611575565b611595565b611575565b9050919050565b60006115cc8261159f565b9050919050565b60006115de826115c1565b9050919050565b6115ee816115d3565b82525050565b600060208201905061160960008301846115e5565b92915050565b600080fd5b61161d81611518565b811461162857600080fd5b50565b60008135905061163a81611614565b92915050565b6000602082840312156116565761165561160f565b5b60006116648482850161162b565b91505092915050565b600080604083850312156116845761168361160f565b5b60006116928582860161162b565b92505060206116a38582860161162b565b9150509250929050565b60006116b8826115c1565b9050919050565b6116c8816116ad565b82525050565b60006020820190506116e360008301846116bf565b92915050565b60006116f482611575565b9050919050565b611704816116e9565b811461170f57600080fd5b50565b600081359050611721816116fb565b92915050565b60006020828403121561173d5761173c61160f565b5b600061174b84828501611712565b91505092915050565b61175d816116e9565b82525050565b6000819050919050565b600061178861178361177e84611763565b611595565b611518565b9050919050565b6117988161176d565b82525050565b60006040820190506117b36000830185611754565b6117c0602083018461178f565b9392505050565b600082825260208201905092915050565b7f496e73756666696369656e74206c697175696469747920736861726573000000600082015250565b600061180e601d836117c7565b9150611819826117d8565b602082019050919050565b6000602082019050818103600083015261183d81611801565b9050919050565b60006020820190506118596000830184611754565b92915050565b60008151905061186e81611614565b92915050565b60006020828403121561188a5761188961160f565b5b60006118988482850161185f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118db82611518565b91506118e683611518565b92508282026118f481611518565b9150828204841483151761190b5761190a6118a1565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061194c82611518565b915061195783611518565b92508261196757611966611912565b5b828204905092915050565b7f496e73756666696369656e74207472616e7366657220616d6f756e7473000000600082015250565b60006119a8601d836117c7565b91506119b382611972565b602082019050919050565b600060208201905081810360008301526119d78161199b565b9050919050565b60006119e982611518565b91506119f483611518565b9250828203905081811115611a0c57611a0b6118a1565b5b92915050565b6000604082019050611a276000830185611754565b611a346020830184611522565b9392505050565b60008115159050919050565b611a5081611a3b565b8114611a5b57600080fd5b50565b600081519050611a6d81611a47565b92915050565b600060208284031215611a8957611a8861160f565b5b6000611a9784828501611a5e565b91505092915050565b7f546f6b656e205472616e73666572204661696c65640000000000000000000000600082015250565b6000611ad66015836117c7565b9150611ae182611aa0565b602082019050919050565b60006020820190508181036000830152611b0581611ac9565b9050919050565b7f556e62616c616e636564204c69717569646974792050726f7669646564000000600082015250565b6000611b42601d836117c7565b9150611b4d82611b0c565b602082019050919050565b60006020820190508181036000830152611b7181611b35565b9050919050565b7f4e6f204c697175696469747920536861726573204d696e746564000000000000600082015250565b6000611bae601a836117c7565b9150611bb982611b78565b602082019050919050565b60006020820190508181036000830152611bdd81611ba1565b9050919050565b6000611bef82611518565b9150611bfa83611518565b9250828201905080821115611c1257611c116118a1565b5b9291505056fea2646970667358221220ac5f3c65d4cf7e3ebb8a77f4a023b976d18fe18ed8c0250ede037ec954daa3fe64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80639c8f9f2311610097578063ba4c28c311610066578063ba4c28c314610242578063c5a1091714610272578063fc7410601461028e578063fcab4350146102aa576100f5565b80639c8f9f23146101b95780639cd441da146101ea578063aba7e58b1461021a578063b9abf69a14610224576100f5565b80635c0b9a2b116100d35780635c0b9a2b146101555780635eab74fc146101735780635f07d45f1461019157806390dc67e61461019b576100f5565b80630902f1ac146100fa57806315770f92146101195780635a76f25e14610137575b600080fd5b6101026102c8565b604051610110929190611531565b60405180910390f35b6101216102d9565b60405161012e919061155a565b60405180910390f35b61013f6102df565b60405161014c919061155a565b60405180910390f35b61015d6102e5565b60405161016a919061155a565b60405180910390f35b61017b6102eb565b60405161018891906115f4565b60405180910390f35b61019961030f565b005b6101a36103a4565b6040516101b0919061155a565b60405180910390f35b6101d360048036038101906101ce9190611640565b6103ae565b6040516101e1929190611531565b60405180910390f35b61020460048036038101906101ff919061166d565b6107b8565b604051610211919061155a565b60405180910390f35b610222610c38565b005b61022c610ccf565b60405161023991906116ce565b60405180910390f35b61025c60048036038101906102579190611727565b610cf5565b604051610269919061155a565b60405180910390f35b61028c60048036038101906102879190611640565b610d0d565b005b6102a860048036038101906102a39190611640565b611049565b005b6102b2611383565b6040516102bf919061155a565b60405180910390f35b600080600254915060035490509091565b60045481565b60025481565b60035481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933655af3107a40006040518363ffffffff1660e01b815260040161037092919061179e565b600060405180830381600087803b15801561038a57600080fd5b505af115801561039e573d6000803e3d6000fd5b50505050565b6000600254905090565b60008082600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042a90611824565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161048f9190611844565b602060405180830381865afa1580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d09190611874565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161052f9190611844565b602060405180830381865afa15801561054c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105709190611874565b90506000600454905080838761058691906118d0565b6105909190611941565b945080828761059f91906118d0565b6105a99190611941565b93506000851180156105bb5750600084115b6105fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f1906119be565b60405180910390fd5b610604338761138d565b610624858461061391906119de565b858461061f91906119de565b611400565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff1660e01b815260040161067f929190611a12565b6020604051808303816000875af115801561069e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c29190611a73565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b815260040161071e929190611a12565b6020604051808303816000875af115801561073d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107619190611a73565b503373ffffffffffffffffffffffffffffffffffffffff167fcb69be6f06914cd72d42e18a286e6ea41d64fa0e34ba87c4002d28c4c493522a876040516107a8919061155a565b60405180910390a2505050915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633158aa7f33856040518363ffffffff1660e01b8152600401610816929190611a12565b6020604051808303816000875af1158015610835573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108599190611a73565b610898576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088f90611aec565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633158aa7f33846040518363ffffffff1660e01b81526004016108f5929190611a12565b6020604051808303816000875af1158015610914573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109389190611a73565b610977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096e90611aec565b60405180910390fd5b6000806109826102c8565b9150915060008211806109955750600081115b156109f35781846109a691906118d0565b81866109b291906118d0565b146109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e990611b58565b60405180910390fd5b5b6000600454905060008103610a1d57610a168587610a1191906118d0565b611412565b9350610a56565b610a53838288610a2d91906118d0565b610a379190611941565b838388610a4491906118d0565b610a4e9190611941565b61148c565b93505b60008411610a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9090611bc4565b60405180910390fd5b610aa333856114a5565b610be160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610aff9190611844565b602060405180830381865afa158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190611874565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b9b9190611844565b602060405180830381865afa158015610bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdc9190611874565b611400565b3373ffffffffffffffffffffffffffffffffffffffff167f9ce434f8c25ca029d1f79dd217b13223ff3c5eddc4bed0a34d004f56a854df7f85604051610c27919061155a565b60405180910390a250505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933655af3107a40006040518363ffffffff1660e01b8152600401610c9b92919061179e565b600060405180830381600087803b158015610cb557600080fd5b505af1158015610cc9573d6000803e3d6000fd5b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633158aa7f33836040518363ffffffff1660e01b8152600401610d68929190611a12565b6020604051808303816000875af1158015610d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dab9190611a73565b610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de190611aec565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610e47929190611a12565b600060405180830381600087803b158015610e6157600080fd5b505af1158015610e75573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac30836040518363ffffffff1660e01b8152600401610ed6929190611a12565b600060405180830381600087803b158015610ef057600080fd5b505af1158015610f04573d6000803e3d6000fd5b5050505061104660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f649190611844565b602060405180830381865afa158015610f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa59190611874565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110009190611844565b602060405180830381865afa15801561101d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110419190611874565b611400565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633158aa7f33836040518363ffffffff1660e01b81526004016110a6929190611a12565b6020604051808303816000875af11580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e99190611a73565b611128576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111f90611aec565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401611183929190611a12565b600060405180830381600087803b15801561119d57600080fd5b505af11580156111b1573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac30836040518363ffffffff1660e01b8152600401611210929190611a12565b600060405180830381600087803b15801561122a57600080fd5b505af115801561123e573d6000803e3d6000fd5b5050505061138060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161129e9190611844565b602060405180830381865afa1580156112bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112df9190611874565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161133a9190611844565b602060405180830381865afa158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b9190611874565b611400565b50565b6000600354905090565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113dc91906119de565b9250508190555080600460008282546113f591906119de565b925050819055505050565b81600281905550806003819055505050565b6000600382111561147957819050600060016002846114319190611941565b61143b9190611be4565b90505b818110156114735780915060028182856114589190611941565b6114629190611be4565b61146c9190611941565b905061143e565b50611487565b6000821461148657600190505b5b919050565b600081831061149b578161149d565b825b905092915050565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114f49190611be4565b92505081905550806004600082825461150d9190611be4565b925050819055505050565b6000819050919050565b61152b81611518565b82525050565b60006040820190506115466000830185611522565b6115536020830184611522565b9392505050565b600060208201905061156f6000830184611522565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006115ba6115b56115b084611575565b611595565b611575565b9050919050565b60006115cc8261159f565b9050919050565b60006115de826115c1565b9050919050565b6115ee816115d3565b82525050565b600060208201905061160960008301846115e5565b92915050565b600080fd5b61161d81611518565b811461162857600080fd5b50565b60008135905061163a81611614565b92915050565b6000602082840312156116565761165561160f565b5b60006116648482850161162b565b91505092915050565b600080604083850312156116845761168361160f565b5b60006116928582860161162b565b92505060206116a38582860161162b565b9150509250929050565b60006116b8826115c1565b9050919050565b6116c8816116ad565b82525050565b60006020820190506116e360008301846116bf565b92915050565b60006116f482611575565b9050919050565b611704816116e9565b811461170f57600080fd5b50565b600081359050611721816116fb565b92915050565b60006020828403121561173d5761173c61160f565b5b600061174b84828501611712565b91505092915050565b61175d816116e9565b82525050565b6000819050919050565b600061178861178361177e84611763565b611595565b611518565b9050919050565b6117988161176d565b82525050565b60006040820190506117b36000830185611754565b6117c0602083018461178f565b9392505050565b600082825260208201905092915050565b7f496e73756666696369656e74206c697175696469747920736861726573000000600082015250565b600061180e601d836117c7565b9150611819826117d8565b602082019050919050565b6000602082019050818103600083015261183d81611801565b9050919050565b60006020820190506118596000830184611754565b92915050565b60008151905061186e81611614565b92915050565b60006020828403121561188a5761188961160f565b5b60006118988482850161185f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118db82611518565b91506118e683611518565b92508282026118f481611518565b9150828204841483151761190b5761190a6118a1565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061194c82611518565b915061195783611518565b92508261196757611966611912565b5b828204905092915050565b7f496e73756666696369656e74207472616e7366657220616d6f756e7473000000600082015250565b60006119a8601d836117c7565b91506119b382611972565b602082019050919050565b600060208201905081810360008301526119d78161199b565b9050919050565b60006119e982611518565b91506119f483611518565b9250828203905081811115611a0c57611a0b6118a1565b5b92915050565b6000604082019050611a276000830185611754565b611a346020830184611522565b9392505050565b60008115159050919050565b611a5081611a3b565b8114611a5b57600080fd5b50565b600081519050611a6d81611a47565b92915050565b600060208284031215611a8957611a8861160f565b5b6000611a9784828501611a5e565b91505092915050565b7f546f6b656e205472616e73666572204661696c65640000000000000000000000600082015250565b6000611ad66015836117c7565b9150611ae182611aa0565b602082019050919050565b60006020820190508181036000830152611b0581611ac9565b9050919050565b7f556e62616c616e636564204c69717569646974792050726f7669646564000000600082015250565b6000611b42601d836117c7565b9150611b4d82611b0c565b602082019050919050565b60006020820190508181036000830152611b7181611b35565b9050919050565b7f4e6f204c697175696469747920536861726573204d696e746564000000000000600082015250565b6000611bae601a836117c7565b9150611bb982611b78565b602082019050919050565b60006020820190508181036000830152611bdd81611ba1565b9050919050565b6000611bef82611518565b9150611bfa83611518565b9250828201905080821115611c1257611c116118a1565b5b9291505056fea2646970667358221220ac5f3c65d4cf7e3ebb8a77f4a023b976d18fe18ed8c0250ede037ec954daa3fe64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 989,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "mytoken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Mytoken)1615"
      },
      {
        "astId": 992,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "mytoken1",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Mytoken1)1674"
      },
      {
        "astId": 994,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "reserve1",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 996,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "reserve2",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 998,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "totalLiquidity",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1002,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "userLiquidity",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Mytoken)1615": {
        "encoding": "inplace",
        "label": "contract Mytoken",
        "numberOfBytes": "20"
      },
      "t_contract(Mytoken1)1674": {
        "encoding": "inplace",
        "label": "contract Mytoken1",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}