{
  "addressStake": "0x984AEd7fE05585De8977f44705F9cBe82A362C06",
  "abiStake": [
    {
      "inputs": [
        {
          "internalType": "contract Mytoken",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "claimReward__transferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "stake__transferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "staking__needMoreThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "unstakeNot_called",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "waitingPeriod_notCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "withdraw__transferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timstamp",
          "type": "uint256"
        }
      ],
      "name": "WithdrewStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "unboundingPeriodInitiated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "RewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsPerTokenShared",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserClaimableToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "claimable",
              "type": "bool"
            }
          ],
          "internalType": "struct Staking.requiredData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserRewardsPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myToken",
      "outputs": [
        {
          "internalType": "contract Mytoken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unboundingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requiredTimestamp",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x256a18147c45e6ce4c0ed9eac04c3cf7b4c084d052240378acd3367afc949f89",
  "receipt": {
    "to": null,
    "from": "0x683F19Ce012A54D60c17F1107E4c05Fd5027b4aE",
    "contractAddress": "0x984AEd7fE05585De8977f44705F9cBe82A362C06",
    "transactionIndex": 147,
    "gasUsed": "1755116",
    "logsBloom": "0x
    "blockHash": "0x6fff0c78fb08c3633dc39b2ec86d1af791e35f4008b2c4306a83d57b2bbf8f63",
    "transactionHash": "0x256a18147c45e6ce4c0ed9eac04c3cf7b4c084d052240378acd3367afc949f89",
    "logs": [],
    "blockNumber": 5643563,
    "cumulativeGasUsed": "16838482",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x466C868acb03ED465f29dbDD1643062935A37056"
  ],
  "numDeployments": 1,
  "solcInputHash": "c4d1aa84022b21f78794aa73d5b6ce87",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Mytoken\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"claimReward__transferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"stake__transferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"staking__needMoreThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"unstakeNot_called\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"waitingPeriod_notCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"withdraw__transferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timstamp\",\"type\":\"uint256\"}],\"name\":\"WithdrewStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"unboundingPeriodInitiated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"RewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsPerTokenShared\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserClaimableToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimable\",\"type\":\"bool\"}],\"internalType\":\"struct Staking.requiredData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserRewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myToken\",\"outputs\":[{\"internalType\":\"contract Mytoken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unboundingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredTimestamp\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/Mytoken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\ncontract Mytoken is ERC20 {\\r\\n    constructor() ERC20(\\\"xEthereum\\\", \\\"xETH\\\") {\\r\\n    }\\r\\n     function mint(address to, uint256 amount) external {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n     function burn(address to,uint256 amount) external {\\r\\n        _burn(to, amount);\\r\\n    }\\r\\n     function transfer_(address recipient, uint256 amount) external returns (bool) {\\r\\n        _transfer(recipient,msg.sender, amount);\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xae803a8a705ed8928dfc2d7343c4fd0485db4541afcc9e0c7b2509ad406fb59e\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./Mytoken.sol\\\";\\r\\n// import \\\"./Token1.sol\\\";\\r\\n\\r\\ncontract Staking is ReentrancyGuard {\\r\\n    Mytoken public myToken;\\r\\n    //  MyToken public token;\\r\\n    constructor(Mytoken _token) {\\r\\n        myToken = _token;\\r\\n        s_lastUpdateTime=block.timestamp;\\r\\n\\r\\n    }\\r\\n    event Staked(address indexed user, uint256 indexed amount);\\r\\n    event WithdrewStake(address indexed user, uint256 indexed amount,uint256 indexed timstamp);\\r\\n    event RewardsClaimed(address indexed user, uint256 indexed amount);\\r\\n    event unboundingPeriodInitiated (address indexed user,uint256 indexed amount, uint256 indexed timestamp );\\r\\n\\r\\n    uint256 public RewardRate=100;\\r\\n    uint256 public s_totalSupply;\\r\\n    uint256 public s_lastUpdateTime; // everytime we call stake,withdraw,claim reward we need to update time;\\r\\n    uint256 public s_rewardPerTokenStored;\\r\\n    uint256 public unboundingPeriod = 1e18;\\r\\n    //   uint256 public withdrawTimeStamp;\\r\\n    \\r\\n        struct entry{\\r\\n        uint256 timestamp;\\r\\n        uint256 amount;\\r\\n        bool notCompleted;\\r\\n    }\\r\\n    struct requiredData{\\r\\n        uint256 timestamp;\\r\\n        uint256 amount;\\r\\n        bool claimable;\\r\\n    }\\r\\n    mapping(address => uint256) s_userStakedAmount;\\r\\n    mapping(address => uint256) s_rewards;\\r\\n    mapping(address => uint256) s_userRewardsPerToken_Paid;\\r\\n    mapping(address => uint256) withdrawTimeStamp;\\r\\n    mapping(address => entry[]) userData;\\r\\n\\r\\n\\r\\n    error stake__transferFailed();\\r\\n    error withdraw__transferFailed();\\r\\n    error claimReward__transferFailed();\\r\\n    error staking__needMoreThanZero();\\r\\n    error waitingPeriod_notCompleted();\\r\\n    error unstakeNot_called();\\r\\n\\r\\n    receive() external payable {}\\r\\n    fallback() external payable {}\\r\\n\\r\\n    modifier updateReward() {\\r\\n        s_lastUpdateTime = block.timestamp;\\r\\n        rewardPerTokenUpdate();\\r\\n        s_rewardPerTokenStored = rewardPerToken();\\r\\n        s_rewards[msg.sender] = earned(msg.sender);\\r\\n        s_userRewardsPerToken_Paid[msg.sender] = s_rewardPerTokenStored;\\r\\n        _;\\r\\n    }\\r\\n    function rewardPerTokenUpdate() public returns (uint256){\\r\\n        if (s_totalSupply == 0) {\\r\\n            return s_rewardPerTokenStored;\\r\\n        }\\r\\n        s_rewardPerTokenStored=s_rewardPerTokenStored +\\r\\n            (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) /\\r\\n                s_totalSupply);\\r\\n        s_lastUpdateTime = block.timestamp;\\r\\n                return s_rewardPerTokenStored;\\r\\n    }\\r\\n\\r\\n    modifier needMoreThanZero() {\\r\\n        if (msg.value == 0) {\\r\\n            revert staking__needMoreThanZero();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function earned(address account) public view returns (uint256) {\\r\\n        uint256 currentBalance = s_userStakedAmount[account];\\r\\n        uint256 amountPaid = s_userRewardsPerToken_Paid[account]; // used while claim reward function call\\r\\n        uint256 currentRewardPerToken = rewardPerToken();\\r\\n        uint256 pastRewards = s_rewards[account];\\r\\n        return\\r\\n            ((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) +\\r\\n            pastRewards;\\r\\n    }\\r\\n\\r\\n    function rewardPerToken() public view returns (uint256) {\\r\\n        if (s_totalSupply == 0) {\\r\\n            return s_rewardPerTokenStored;\\r\\n        }\\r\\n        return\\r\\n            s_rewardPerTokenStored +\\r\\n            (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) /\\r\\n                s_totalSupply);\\r\\n    }\\r\\n\\r\\n    function stake()\\r\\n        public \\r\\n        updateReward()\\r\\n        needMoreThanZero()\\r\\n        nonReentrant\\r\\n        payable \\r\\n    {   uint256 amount = msg.value;\\r\\n        s_userStakedAmount[msg.sender] =\\r\\n        s_userStakedAmount[msg.sender] +\\r\\n            amount;\\r\\n        s_totalSupply = s_totalSupply + amount;\\r\\n        (bool sent, ) = (payable(address(this))).call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to take ether\\\");\\r\\n        uint256 staked_tokens=(93)*(amount)/100;\\r\\n        myToken.mint(msg.sender, staked_tokens);\\r\\n\\r\\n        emit Staked(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 amount) public {\\r\\n        require(s_userStakedAmount[msg.sender] >=amount, \\\"not enough eth staked\\\");\\r\\n        s_userStakedAmount[msg.sender] =\\r\\n                s_userStakedAmount[msg.sender] -\\r\\n                amount;\\r\\n        userData[msg.sender].push(entry(block.timestamp,amount,true));\\r\\n        emit unboundingPeriodInitiated(msg.sender, amount,block.timestamp);\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdraw(uint256 requiredTimestamp)\\r\\n        external\\r\\n        updateReward()\\r\\n        // needMoreThanZero()\\r\\n    {   \\r\\n         entry[] memory user=userData[msg.sender];\\r\\n        uint256 userCount = userData[msg.sender].length;\\r\\n        entry[] memory temp = new entry[](userCount);\\r\\n        for(uint256 i =0 ; i < userCount; i++ ){\\r\\n            uint256 timestamp=user[i].timestamp;\\r\\n            uint256 amount = user[i].amount;\\r\\n            bool notCompleted = user[i].notCompleted;\\r\\n        if( block.timestamp-timestamp>=10 && requiredTimestamp == timestamp && notCompleted){\\r\\n        withdrawTimeStamp[msg.sender] = block.timestamp;\\r\\n        s_totalSupply = s_totalSupply - amount;\\r\\n        try myToken.burn(msg.sender, amount) {\\r\\n            emit WithdrewStake(msg.sender, amount, block.timestamp); \\r\\n            withdrawTimeStamp[msg.sender] = block.timestamp;\\r\\n            s_totalSupply = s_totalSupply - amount;\\r\\n            // emit WithdrewStake(msg.sender, amount);\\r\\n            uint256 rpt=rewardPerToken();\\r\\n            amount=(amount * rpt) + amount;\\r\\n            amount = (amount*100)/93;\\r\\n            (bool sent, ) = (payable(msg.sender)).call{value: amount}(\\\"\\\");\\r\\n            require(sent, \\\"Failed to send Ether\\\");\\r\\n            emit RewardsClaimed(msg.sender,amount);\\r\\n        }\\r\\n        catch {\\r\\n            temp[i]=(entry(timestamp,amount,notCompleted));\\r\\n            revert withdraw__transferFailed(); \\r\\n        }\\r\\n        }\\r\\n        else{\\r\\n            revert unstakeNot_called();\\r\\n        }\\r\\n        }\\r\\n            for(uint256 i = 0; i<userCount ; i++){\\r\\n                userData[msg.sender][i]=temp[i];\\r\\n            }\\r\\n    }\\r\\n    function getUserClaimableToken() public view returns(requiredData[] memory) {\\r\\n        requiredData[] memory data = new requiredData[](userData[msg.sender].length);\\r\\n\\r\\n        for (uint256 i = 0; i < userData[msg.sender].length; i++) {\\r\\n            uint256 timestamp = userData[msg.sender][i].timestamp;\\r\\n            uint256 amount = userData[msg.sender][i].amount;\\r\\n            bool claimable = block.timestamp - timestamp >= 10;\\r\\n            data[i] = requiredData(timestamp, amount, claimable);\\r\\n    }\\r\\n    \\r\\n    return data;\\r\\n    }\\r\\n\\r\\n    function getTotalSupply() public view returns(uint256){\\r\\n        return s_totalSupply;\\r\\n    }\\r\\n    function getRewardsPerTokenShared() public view returns(uint256){\\r\\n        return s_rewardPerTokenStored;\\r\\n    }\\r\\n    function getBlockTimestamp() public view returns(uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n    function getUserBalance() public view returns(uint256){\\r\\n        return s_userStakedAmount[msg.sender];\\r\\n    }\\r\\n    function getUserRewardsPerToken() public view returns(uint256){\\r\\n        return s_userRewardsPerToken_Paid[msg.sender];\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xbc884e3cd9c35974f9d706b177c6656fd99c15d4b288c40017b4133fd6b9ebf4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526064600255670de0b6b3a76400006006553480156200002257600080fd5b5060405162001e2338038062001e2383398181016040528101906200004891906200011d565b600160008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600481905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000d182620000a4565b9050919050565b6000620000e582620000c4565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b6000602082840312156200013657620001356200009f565b5b6000620001468482850162000106565b91505092915050565b611cc4806200015f6000396000f3fe60806040526004361061010c5760003560e01c8063796b89b911610095578063c406f34511610064578063c406f34514610331578063c4e41b221461035c578063ccc23e5214610387578063cd3daf9d146103b2578063d94e5351146103dd57610113565b8063796b89b9146102855780638a1833a5146102b0578063b7013dc1146102db578063b8fcf9371461030657610113565b80632e1a7d4d116100dc5780632e1a7d4d146101d1578063304ac91b146101fa5780633a4b66f1146102255780636a74a0fc1461022f5780636aa0838f1461025a57610113565b80628cc262146101155780631acd4786146101525780631b52113b1461017d5780632e17de78146101a857610113565b3661011357005b005b34801561012157600080fd5b5061013c60048036038101906101379190611647565b610408565b604051610149919061168d565b60405180910390f35b34801561015e57600080fd5b50610167610521565b60405161017491906117c3565b60405180910390f35b34801561018957600080fd5b5061019261073f565b60405161019f919061168d565b60405180910390f35b3480156101b457600080fd5b506101cf60048036038101906101ca9190611811565b610786565b005b3480156101dd57600080fd5b506101f860048036038101906101f39190611811565b61099a565b005b34801561020657600080fd5b5061020f611086565b60405161021c919061168d565b60405180910390f35b61022d61108c565b005b34801561023b57600080fd5b506102446113ce565b604051610251919061168d565b60405180910390f35b34801561026657600080fd5b5061026f6113d4565b60405161027c919061168d565b60405180910390f35b34801561029157600080fd5b5061029a6113da565b6040516102a7919061168d565b60405180910390f35b3480156102bc57600080fd5b506102c56113e2565b6040516102d2919061168d565b60405180910390f35b3480156102e757600080fd5b506102f06113e8565b6040516102fd919061168d565b60405180910390f35b34801561031257600080fd5b5061031b61142f565b604051610328919061189d565b60405180910390f35b34801561033d57600080fd5b50610346611455565b604051610353919061168d565b60405180910390f35b34801561036857600080fd5b5061037161145f565b60405161037e919061168d565b60405180910390f35b34801561039357600080fd5b5061039c611469565b6040516103a9919061168d565b60405180910390f35b3480156103be57600080fd5b506103c761146f565b6040516103d4919061168d565b60405180910390f35b3480156103e957600080fd5b506103f26114d2565b6040516103ff919061168d565b60405180910390f35b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600061049b61146f565b90506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080670de0b6b3a764000084846104f791906118e7565b86610502919061191b565b61050c919061198c565b61051691906119bd565b945050505050919050565b60606000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905067ffffffffffffffff811115610581576105806119f1565b5b6040519080825280602002602001820160405280156105ba57816020015b6105a761159e565b81526020019060019003908161059f5790505b50905060005b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015610737576000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061065d5761065c611a20565b5b90600052602060002090600302016000015490506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481106106c4576106c3611a20565b5b90600052602060002090600302016001015490506000600a83426106e891906118e7565b10159050604051806060016040528084815260200183815260200182151581525085858151811061071c5761071b611a20565b5b602002602001018190525050505080806001019150506105c0565b508091505090565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ff90611aac565b60405180910390fd5b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461085391906118e7565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405280428152602001838152602001600115158152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550505042813373ffffffffffffffffffffffffffffffffffffffff167ffd99ad66fe6dcbc7fecf00d5785a0d0bd80a584451d8cbb7feee471fd04dec8560405160405180910390a450565b426004819055506109a96114d2565b506109b261146f565b6005819055506109c133610408565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610b0c578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff16151515158152505081526020019060010190610aab565b5050505090506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060008167ffffffffffffffff811115610b7557610b746119f1565b5b604051908082528060200260200182016040528015610bae57816020015b610b9b6115c1565b815260200190600190039081610b935790505b50905060005b82811015610fb5576000848281518110610bd157610bd0611a20565b5b60200260200101516000015190506000858381518110610bf457610bf3611a20565b5b60200260200101516020015190506000868481518110610c1757610c16611a20565b5b6020026020010151604001519050600a8342610c3391906118e7565b10158015610c4057508288145b8015610c495750805b15610f735742600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600354610ca091906118e7565b600381905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b8152600401610d03929190611adb565b600060405180830381600087803b158015610d1d57600080fd5b505af1925050508015610d2e575060015b610d9f576040518060600160405280848152602001838152602001821515815250858581518110610d6257610d61611a20565b5b60200260200101819052506040517f6e3b5f2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42823373ffffffffffffffffffffffffffffffffffffffff167f874b6b6176c92c12e9ffa729ba947c2b035854d42b9df613ee4100f08548136760405160405180910390a442600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600354610e3691906118e7565b6003819055506000610e4661146f565b9050828184610e55919061191b565b610e5f91906119bd565b9250605d606484610e70919061191b565b610e7a919061198c565b925060003373ffffffffffffffffffffffffffffffffffffffff1684604051610ea290611b35565b60006040518083038185875af1925050503d8060008114610edf576040519150601f19603f3d011682016040523d82523d6000602084013e610ee4565b606091505b5050905080610f28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1f90611b96565b60405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe60405160405180910390a35050610fa5565b6040517f1f2dcc7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050508080600101915050610bb4565b5060005b8281101561107f57818181518110610fd457610fd3611a20565b5b6020026020010151600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061102d5761102c611a20565b5b9060005260206000209060030201600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050508080600101915050610fb9565b5050505050565b60055481565b4260048190555061109b6114d2565b506110a461146f565b6005819055506110b333610408565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003403611176576040517fe5fbc37f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61117e611545565b600034905080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111ce91906119bd565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060035461121f91906119bd565b60038190555060003073ffffffffffffffffffffffffffffffffffffffff168260405161124b90611b35565b60006040518083038185875af1925050503d8060008114611288576040519150601f19603f3d011682016040523d82523d6000602084013e61128d565b606091505b50509050806112d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c890611c02565b60405180910390fd5b6000606483605d6112e2919061191b565b6112ec919061198c565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b815260040161134b929190611adb565b600060405180830381600087803b15801561136557600080fd5b505af1158015611379573d6000803e3d6000fd5b50505050823373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a35050506113cc611594565b565b60035481565b60045481565b600042905090565b60025481565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554905090565b6000600354905090565b60065481565b600080600354036114845760055490506114cf565b600354670de0b6b3a7640000600254600454426114a191906118e7565b6114ab919061191b565b6114b5919061191b565b6114bf919061198c565b6005546114cc91906119bd565b90505b90565b600080600354036114e7576005549050611542565b600354670de0b6b3a76400006002546004544261150491906118e7565b61150e919061191b565b611518919061191b565b611522919061198c565b60055461152f91906119bd565b6005819055504260048190555060055490505b90565b60026000540361158a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158190611c6e565b60405180910390fd5b6002600081905550565b6001600081905550565b604051806060016040528060008152602001600081526020016000151581525090565b604051806060016040528060008152602001600081526020016000151581525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611614826115e9565b9050919050565b61162481611609565b811461162f57600080fd5b50565b6000813590506116418161161b565b92915050565b60006020828403121561165d5761165c6115e4565b5b600061166b84828501611632565b91505092915050565b6000819050919050565b61168781611674565b82525050565b60006020820190506116a2600083018461167e565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6116dd81611674565b82525050565b60008115159050919050565b6116f8816116e3565b82525050565b60608201600082015161171460008501826116d4565b50602082015161172760208501826116d4565b50604082015161173a60408501826116ef565b50505050565b600061174c83836116fe565b60608301905092915050565b6000602082019050919050565b6000611770826116a8565b61177a81856116b3565b9350611785836116c4565b8060005b838110156117b657815161179d8882611740565b97506117a883611758565b925050600181019050611789565b5085935050505092915050565b600060208201905081810360008301526117dd8184611765565b905092915050565b6117ee81611674565b81146117f957600080fd5b50565b60008135905061180b816117e5565b92915050565b600060208284031215611827576118266115e4565b5b6000611835848285016117fc565b91505092915050565b6000819050919050565b600061186361185e611859846115e9565b61183e565b6115e9565b9050919050565b600061187582611848565b9050919050565b60006118878261186a565b9050919050565b6118978161187c565b82525050565b60006020820190506118b2600083018461188e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118f282611674565b91506118fd83611674565b9250828203905081811115611915576119146118b8565b5b92915050565b600061192682611674565b915061193183611674565b925082820261193f81611674565b91508282048414831517611956576119556118b8565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061199782611674565b91506119a283611674565b9250826119b2576119b161195d565b5b828204905092915050565b60006119c882611674565b91506119d383611674565b92508282019050808211156119eb576119ea6118b8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f6e6f7420656e6f75676820657468207374616b65640000000000000000000000600082015250565b6000611a96601583611a4f565b9150611aa182611a60565b602082019050919050565b60006020820190508181036000830152611ac581611a89565b9050919050565b611ad581611609565b82525050565b6000604082019050611af06000830185611acc565b611afd602083018461167e565b9392505050565b600081905092915050565b50565b6000611b1f600083611b04565b9150611b2a82611b0f565b600082019050919050565b6000611b4082611b12565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000611b80601483611a4f565b9150611b8b82611b4a565b602082019050919050565b60006020820190508181036000830152611baf81611b73565b9050919050565b7f4661696c656420746f2074616b65206574686572000000000000000000000000600082015250565b6000611bec601483611a4f565b9150611bf782611bb6565b602082019050919050565b60006020820190508181036000830152611c1b81611bdf565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611c58601f83611a4f565b9150611c6382611c22565b602082019050919050565b60006020820190508181036000830152611c8781611c4b565b905091905056fea26469706673582212204455f5c95486285ea144fc83ac91a9fc76a5a6a63fc90f8ab23a394ed757f7fd64736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061010c5760003560e01c8063796b89b911610095578063c406f34511610064578063c406f34514610331578063c4e41b221461035c578063ccc23e5214610387578063cd3daf9d146103b2578063d94e5351146103dd57610113565b8063796b89b9146102855780638a1833a5146102b0578063b7013dc1146102db578063b8fcf9371461030657610113565b80632e1a7d4d116100dc5780632e1a7d4d146101d1578063304ac91b146101fa5780633a4b66f1146102255780636a74a0fc1461022f5780636aa0838f1461025a57610113565b80628cc262146101155780631acd4786146101525780631b52113b1461017d5780632e17de78146101a857610113565b3661011357005b005b34801561012157600080fd5b5061013c60048036038101906101379190611647565b610408565b604051610149919061168d565b60405180910390f35b34801561015e57600080fd5b50610167610521565b60405161017491906117c3565b60405180910390f35b34801561018957600080fd5b5061019261073f565b60405161019f919061168d565b60405180910390f35b3480156101b457600080fd5b506101cf60048036038101906101ca9190611811565b610786565b005b3480156101dd57600080fd5b506101f860048036038101906101f39190611811565b61099a565b005b34801561020657600080fd5b5061020f611086565b60405161021c919061168d565b60405180910390f35b61022d61108c565b005b34801561023b57600080fd5b506102446113ce565b604051610251919061168d565b60405180910390f35b34801561026657600080fd5b5061026f6113d4565b60405161027c919061168d565b60405180910390f35b34801561029157600080fd5b5061029a6113da565b6040516102a7919061168d565b60405180910390f35b3480156102bc57600080fd5b506102c56113e2565b6040516102d2919061168d565b60405180910390f35b3480156102e757600080fd5b506102f06113e8565b6040516102fd919061168d565b60405180910390f35b34801561031257600080fd5b5061031b61142f565b604051610328919061189d565b60405180910390f35b34801561033d57600080fd5b50610346611455565b604051610353919061168d565b60405180910390f35b34801561036857600080fd5b5061037161145f565b60405161037e919061168d565b60405180910390f35b34801561039357600080fd5b5061039c611469565b6040516103a9919061168d565b60405180910390f35b3480156103be57600080fd5b506103c761146f565b6040516103d4919061168d565b60405180910390f35b3480156103e957600080fd5b506103f26114d2565b6040516103ff919061168d565b60405180910390f35b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600061049b61146f565b90506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080670de0b6b3a764000084846104f791906118e7565b86610502919061191b565b61050c919061198c565b61051691906119bd565b945050505050919050565b60606000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905067ffffffffffffffff811115610581576105806119f1565b5b6040519080825280602002602001820160405280156105ba57816020015b6105a761159e565b81526020019060019003908161059f5790505b50905060005b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015610737576000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061065d5761065c611a20565b5b90600052602060002090600302016000015490506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481106106c4576106c3611a20565b5b90600052602060002090600302016001015490506000600a83426106e891906118e7565b10159050604051806060016040528084815260200183815260200182151581525085858151811061071c5761071b611a20565b5b602002602001018190525050505080806001019150506105c0565b508091505090565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ff90611aac565b60405180910390fd5b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461085391906118e7565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405280428152602001838152602001600115158152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550505042813373ffffffffffffffffffffffffffffffffffffffff167ffd99ad66fe6dcbc7fecf00d5785a0d0bd80a584451d8cbb7feee471fd04dec8560405160405180910390a450565b426004819055506109a96114d2565b506109b261146f565b6005819055506109c133610408565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610b0c578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff16151515158152505081526020019060010190610aab565b5050505090506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060008167ffffffffffffffff811115610b7557610b746119f1565b5b604051908082528060200260200182016040528015610bae57816020015b610b9b6115c1565b815260200190600190039081610b935790505b50905060005b82811015610fb5576000848281518110610bd157610bd0611a20565b5b60200260200101516000015190506000858381518110610bf457610bf3611a20565b5b60200260200101516020015190506000868481518110610c1757610c16611a20565b5b6020026020010151604001519050600a8342610c3391906118e7565b10158015610c4057508288145b8015610c495750805b15610f735742600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600354610ca091906118e7565b600381905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b8152600401610d03929190611adb565b600060405180830381600087803b158015610d1d57600080fd5b505af1925050508015610d2e575060015b610d9f576040518060600160405280848152602001838152602001821515815250858581518110610d6257610d61611a20565b5b60200260200101819052506040517f6e3b5f2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42823373ffffffffffffffffffffffffffffffffffffffff167f874b6b6176c92c12e9ffa729ba947c2b035854d42b9df613ee4100f08548136760405160405180910390a442600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600354610e3691906118e7565b6003819055506000610e4661146f565b9050828184610e55919061191b565b610e5f91906119bd565b9250605d606484610e70919061191b565b610e7a919061198c565b925060003373ffffffffffffffffffffffffffffffffffffffff1684604051610ea290611b35565b60006040518083038185875af1925050503d8060008114610edf576040519150601f19603f3d011682016040523d82523d6000602084013e610ee4565b606091505b5050905080610f28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1f90611b96565b60405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe60405160405180910390a35050610fa5565b6040517f1f2dcc7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050508080600101915050610bb4565b5060005b8281101561107f57818181518110610fd457610fd3611a20565b5b6020026020010151600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061102d5761102c611a20565b5b9060005260206000209060030201600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050508080600101915050610fb9565b5050505050565b60055481565b4260048190555061109b6114d2565b506110a461146f565b6005819055506110b333610408565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003403611176576040517fe5fbc37f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61117e611545565b600034905080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111ce91906119bd565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060035461121f91906119bd565b60038190555060003073ffffffffffffffffffffffffffffffffffffffff168260405161124b90611b35565b60006040518083038185875af1925050503d8060008114611288576040519150601f19603f3d011682016040523d82523d6000602084013e61128d565b606091505b50509050806112d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c890611c02565b60405180910390fd5b6000606483605d6112e2919061191b565b6112ec919061198c565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b815260040161134b929190611adb565b600060405180830381600087803b15801561136557600080fd5b505af1158015611379573d6000803e3d6000fd5b50505050823373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a35050506113cc611594565b565b60035481565b60045481565b600042905090565b60025481565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554905090565b6000600354905090565b60065481565b600080600354036114845760055490506114cf565b600354670de0b6b3a7640000600254600454426114a191906118e7565b6114ab919061191b565b6114b5919061191b565b6114bf919061198c565b6005546114cc91906119bd565b90505b90565b600080600354036114e7576005549050611542565b600354670de0b6b3a76400006002546004544261150491906118e7565b61150e919061191b565b611518919061191b565b611522919061198c565b60055461152f91906119bd565b6005819055504260048190555060055490505b90565b60026000540361158a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158190611c6e565b60405180910390fd5b6002600081905550565b6001600081905550565b604051806060016040528060008152602001600081526020016000151581525090565b604051806060016040528060008152602001600081526020016000151581525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611614826115e9565b9050919050565b61162481611609565b811461162f57600080fd5b50565b6000813590506116418161161b565b92915050565b60006020828403121561165d5761165c6115e4565b5b600061166b84828501611632565b91505092915050565b6000819050919050565b61168781611674565b82525050565b60006020820190506116a2600083018461167e565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6116dd81611674565b82525050565b60008115159050919050565b6116f8816116e3565b82525050565b60608201600082015161171460008501826116d4565b50602082015161172760208501826116d4565b50604082015161173a60408501826116ef565b50505050565b600061174c83836116fe565b60608301905092915050565b6000602082019050919050565b6000611770826116a8565b61177a81856116b3565b9350611785836116c4565b8060005b838110156117b657815161179d8882611740565b97506117a883611758565b925050600181019050611789565b5085935050505092915050565b600060208201905081810360008301526117dd8184611765565b905092915050565b6117ee81611674565b81146117f957600080fd5b50565b60008135905061180b816117e5565b92915050565b600060208284031215611827576118266115e4565b5b6000611835848285016117fc565b91505092915050565b6000819050919050565b600061186361185e611859846115e9565b61183e565b6115e9565b9050919050565b600061187582611848565b9050919050565b60006118878261186a565b9050919050565b6118978161187c565b82525050565b60006020820190506118b2600083018461188e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118f282611674565b91506118fd83611674565b9250828203905081811115611915576119146118b8565b5b92915050565b600061192682611674565b915061193183611674565b925082820261193f81611674565b91508282048414831517611956576119556118b8565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061199782611674565b91506119a283611674565b9250826119b2576119b161195d565b5b828204905092915050565b60006119c882611674565b91506119d383611674565b92508282019050808211156119eb576119ea6118b8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f6e6f7420656e6f75676820657468207374616b65640000000000000000000000600082015250565b6000611a96601583611a4f565b9150611aa182611a60565b602082019050919050565b60006020820190508181036000830152611ac581611a89565b9050919050565b611ad581611609565b82525050565b6000604082019050611af06000830185611acc565b611afd602083018461167e565b9392505050565b600081905092915050565b50565b6000611b1f600083611b04565b9150611b2a82611b0f565b600082019050919050565b6000611b4082611b12565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000611b80601483611a4f565b9150611b8b82611b4a565b602082019050919050565b60006020820190508181036000830152611baf81611b73565b9050919050565b7f4661696c656420746f2074616b65206574686572000000000000000000000000600082015250565b6000611bec601483611a4f565b9150611bf782611bb6565b602082019050919050565b60006020820190508181036000830152611c1b81611bdf565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611c58601f83611a4f565b9150611c6382611c22565b602082019050919050565b60006020820190508181036000830152611c8781611c4b565b905091905056fea26469706673582212204455f5c95486285ea144fc83ac91a9fc76a5a6a63fc90f8ab23a394ed757f7fd64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2439,
        "contract": "contracts/Staking.sol:Staking",
        "label": "myToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Mytoken)843"
      },
      {
        "astId": 2486,
        "contract": "contracts/Staking.sol:Staking",
        "label": "RewardRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2488,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2490,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_lastUpdateTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2492,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardPerTokenStored",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2495,
        "contract": "contracts/Staking.sol:Staking",
        "label": "unboundingPeriod",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2513,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_userStakedAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2517,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewards",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2521,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_userRewardsPerToken_Paid",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2525,
        "contract": "contracts/Staking.sol:Staking",
        "label": "withdrawTimeStamp",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2531,
        "contract": "contracts/Staking.sol:Staking",
        "label": "userData",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_struct(entry)2502_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(entry)2502_storage)dyn_storage": {
        "base": "t_struct(entry)2502_storage",
        "encoding": "dynamic_array",
        "label": "struct Staking.entry[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Mytoken)843": {
        "encoding": "inplace",
        "label": "contract Mytoken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(entry)2502_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Staking.entry[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(entry)2502_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(entry)2502_storage": {
        "encoding": "inplace",
        "label": "struct Staking.entry",
        "members": [
          {
            "astId": 2497,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2499,
            "contract": "contracts/Staking.sol:Staking",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2501,
            "contract": "contracts/Staking.sol:Staking",
            "label": "notCompleted",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}






    