{
  "addressAutostake": "0xc06b12e9c71A2B109c44Ac3101c3E3c56d2E1f98",
  "abiAutoStake": [
    {
      "inputs": [
        {
          "internalType": "contract Mytoken",
          "name": "_mytoken",
          "type": "address"
        },
        {
          "internalType": "contract Mytoken1",
          "name": "_mytoken1",
          "type": "address"
        },
        {
          "internalType": "contract Mytoken2",
          "name": "_mytoken2",
          "type": "address"
        },
        {
          "internalType": "contract Staking",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract Restaking1",
          "name": "_restaking1",
          "type": "address"
        },
        {
          "internalType": "contract Restaking2",
          "name": "_restaking2",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "autostaking1",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autostaking2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTokensForStacker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myToken",
      "outputs": [
        {
          "internalType": "contract Mytoken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myToken1",
      "outputs": [
        {
          "internalType": "contract Mytoken1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myToken2",
      "outputs": [
        {
          "internalType": "contract Mytoken2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restaking1",
      "outputs": [
        {
          "internalType": "contract Restaking1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restaking2",
      "outputs": [
        {
          "internalType": "contract Restaking2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract Staking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfba61c51ccbdee8cb19ff93d38363c114567c6245815665e8ba389fc8b55dcb7",
  "receipt": {
    "to": null,
    "from": "0x683F19Ce012A54D60c17F1107E4c05Fd5027b4aE",
    "contractAddress": "0xc06b12e9c71A2B109c44Ac3101c3E3c56d2E1f98",
    "transactionIndex": 42,
    "gasUsed": "956726",
    "logsBloom": "0x
    "blockHash": "0xa7d272b359a6a420813ff748632e698593d5b0064304ba61a47b49aa77537bfc",
    "transactionHash": "0xfba61c51ccbdee8cb19ff93d38363c114567c6245815665e8ba389fc8b55dcb7",
    "logs": [],
    "blockNumber": 5645018,
    "cumulativeGasUsed": "9153146",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x466C868acb03ED465f29dbDD1643062935A37056",
    "0x9870Efd303AB183604Cf94A2a52A4267DC56ee66",
    "0xd0Da277aAc7c1bF68707e2df2087e3142cFc37E7",
    "0x984AEd7fE05585De8977f44705F9cBe82A362C06",
    "0x86ba08De0F14b6B2Af8688e1760F6aea5B0D462C",
    "0x4b90447f3BA00f0773B3096E762e1D5DF018f9Ab"
  ],
  "numDeployments": 3,
  "solcInputHash": "518162182d5077684f317c7b25dd6dd4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Mytoken\",\"name\":\"_mytoken\",\"type\":\"address\"},{\"internalType\":\"contract Mytoken1\",\"name\":\"_mytoken1\",\"type\":\"address\"},{\"internalType\":\"contract Mytoken2\",\"name\":\"_mytoken2\",\"type\":\"address\"},{\"internalType\":\"contract Staking\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract Restaking1\",\"name\":\"_restaking1\",\"type\":\"address\"},{\"internalType\":\"contract Restaking2\",\"name\":\"_restaking2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"autostaking1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autostaking2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTokensForStacker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myToken\",\"outputs\":[{\"internalType\":\"contract Mytoken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myToken1\",\"outputs\":[{\"internalType\":\"contract Mytoken1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myToken2\",\"outputs\":[{\"internalType\":\"contract Mytoken2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restaking1\",\"outputs\":[{\"internalType\":\"contract Restaking1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restaking2\",\"outputs\":[{\"internalType\":\"contract Restaking2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract Staking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Autostaking.sol\":\"Autostaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/Autostaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// import \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./Mytoken.sol\\\";\\nimport \\\"./Mytoken1.sol\\\";\\nimport \\\"./Mytoken2.sol\\\";\\nimport \\\"./Staking.sol\\\";\\nimport \\\"./Restaking1.sol\\\";\\nimport \\\"./Restaking2.sol\\\";\\n\\ncontract Autostaking {\\n    Mytoken public myToken;\\n    Mytoken1 public myToken1;\\n    Mytoken2 public myToken2;\\n    Staking public staking;\\n    Restaking1 public restaking1;\\n    Restaking2 public restaking2;\\n\\n    constructor(\\n        Mytoken _mytoken,\\n        Mytoken1 _mytoken1,\\n        Mytoken2 _mytoken2,\\n        Staking _staking,\\n        Restaking1 _restaking1,\\n        Restaking2 _restaking2\\n    ) {\\n        myToken = _mytoken;\\n        myToken1 = _mytoken1;\\n        myToken2 = _mytoken2;\\n        staking = _staking;\\n        restaking1 = _restaking1;\\n        restaking2 = _restaking2;\\n    }\\n\\n    // receive() external payable {}\\n    // fallback() external payable {}\\n    function autostaking1() public payable {\\n        // Forward the received ether to the staking contract\\n        (bool success, ) = address(staking).call{value: msg.value / 2}(\\n            abi.encodeWithSignature(\\\"stake()\\\")\\n        );\\n        require(success, \\\"Staking failed\\\");\\n\\n        // Assuming ReStaking's stake function also requires ether\\n        (success, ) = address(restaking1).call{value: msg.value / 2}(\\n            abi.encodeWithSignature(\\\"transferTokens(uint256)\\\",msg.value / 2)\\n        );\\n        require(success, \\\"ReStaking failed\\\");\\n    }\\n\\n\\n        function autostaking2() public payable {\\n        // Forward the received ether to the staking contract\\n        (bool success, ) = address(staking).call{value: msg.value / 2}(\\n            abi.encodeWithSignature(\\\"stake()\\\")\\n        );\\n        require(success, \\\"Staking failed\\\");\\n\\n        // Assuming ReStaking's stake function also requires ether\\n        (success, ) = address(restaking2).call{value: msg.value / 2}(\\n            abi.encodeWithSignature(\\\"transferTokens(uint256)\\\",msg.value / 2)\\n        );\\n        require(success, \\\"ReStaking failed\\\");\\n    }\\n\\n\\n\\n    function mintTokensForStacker(uint256 amount) public {\\n        myToken.mint(msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcea740be7747af594f991074a82ee0b0a515bda8f2d92dd33c0e15aa8d80ce2d\",\"license\":\"MIT\"},\"contracts/Mytoken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\ncontract Mytoken is ERC20 {\\r\\n    constructor() ERC20(\\\"xEthereum\\\", \\\"xETH\\\") {\\r\\n    }\\r\\n     function mint(address to, uint256 amount) external {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n     function burn(address to,uint256 amount) external {\\r\\n        _burn(to, amount);\\r\\n    }\\r\\n     function transfer_(address recipient, uint256 amount) external returns (bool) {\\r\\n        _transfer(recipient,msg.sender, amount);\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xae803a8a705ed8928dfc2d7343c4fd0485db4541afcc9e0c7b2509ad406fb59e\",\"license\":\"MIT\"},\"contracts/Mytoken1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\ncontract Mytoken1 is ERC20 {\\r\\n    constructor() ERC20(\\\"lxEthereum\\\", \\\"lxETH\\\") {\\r\\n    }\\r\\n     function mint(address to, uint256 amount) external {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n     function burn(address to,uint256 amount) external {\\r\\n        _burn(to, amount);\\r\\n    }\\r\\n     function transfer_(address recipient, uint256 amount) external returns (bool) {\\r\\n        _transfer(recipient,msg.sender, amount);\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xeb026959c5a25ccad15af84f35676b8f946a44ef61fa963201bf42fcf727e7c9\",\"license\":\"MIT\"},\"contracts/Mytoken2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\ncontract Mytoken2 is ERC20 {\\r\\n    constructor() ERC20(\\\"kxEthereum\\\", \\\"kxETH\\\") {\\r\\n    }\\r\\n     function mint(address to, uint256 amount) external {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n     function burn(address to,uint256 amount) external {\\r\\n        _burn(to, amount);\\r\\n    }\\r\\n     function transfer_(address recipient, uint256 amount) external returns (bool) {\\r\\n        _transfer(recipient,msg.sender, amount);\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf6d47eb4f1d219c97f2618dedfcc8fa48b09f305ad4f7119ca92707f837c89d3\",\"license\":\"MIT\"},\"contracts/Restaking1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./Mytoken.sol\\\";\\r\\nimport \\\"./Mytoken1.sol\\\";\\r\\n\\r\\ncontract Restaking1 {\\r\\n    Mytoken public myToken;\\r\\n    Mytoken1 public anotherToken;\\r\\n    event Staked(address indexed user, uint256 indexed amount);\\r\\n    event WithdrewStake(address indexed user, uint256 indexed amount,uint256 indexed timestamp);\\r\\n    event RewardsClaimed(address indexed user, uint256 indexed amount);\\r\\n    event unboundingPeriodInitiated (address indexed user,uint256 indexed amount, uint256 indexed timestamp );\\r\\n    uint256 public RewardRate=100;\\r\\n    uint256 public s_totalSupply;\\r\\n    uint256 public s_lastUpdateTime; // everytime we call stake,withdraw,claim reward we need to update time;\\r\\n    uint256 public s_rewardPerTokenStored;\\r\\n    \\r\\n    //   uint256 public withdrawTimeStamp;\\r\\n\\r\\n    struct entry{\\r\\n        uint256 timestamp;\\r\\n        uint256 amount;\\r\\n        bool notCompleted;\\r\\n    }\\r\\n\\r\\n    struct requiredData{\\r\\n        uint256 timestamp;\\r\\n        uint256 amount;\\r\\n        bool claimable;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint256) s_userStakedAmount;\\r\\n    mapping(address => entry[]) userData;\\r\\n    mapping(address => uint256) s_rewards;\\r\\n    mapping(address => uint256) s_userRewardsPerToken_Paid;\\r\\n    mapping(address => uint256) withdrawTimeStamp;\\r\\n    mapping (address=>uint256) public StakersBalance;\\r\\n\\r\\n\\r\\n    modifier updateReward() {\\r\\n        s_lastUpdateTime = block.timestamp;\\r\\n        rewardPerTokenUpdate();\\r\\n        s_rewardPerTokenStored = rewardPerToken();\\r\\n        s_rewards[msg.sender] = earned(msg.sender);\\r\\n        s_userRewardsPerToken_Paid[msg.sender] = s_rewardPerTokenStored;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    error stake__transferFailed();\\r\\n    error withdraw__transferFailed();\\r\\n    error claimReward__transferFailed();\\r\\n    error staking__needMoreThanZero();\\r\\n    error waitingPeriod_notCompleted();\\r\\n    error unstakeNot_called();\\r\\n\\r\\n    constructor(Mytoken _myToken, Mytoken1 _anotherToken) {\\r\\n        myToken = _myToken;\\r\\n        anotherToken = _anotherToken;\\r\\n        s_lastUpdateTime = block.timestamp;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function earned(address account) public view returns (uint256) {\\r\\n        uint256 currentBalance = s_userStakedAmount[account];\\r\\n        uint256 amountPaid = s_userRewardsPerToken_Paid[account]; // used while claim reward function call\\r\\n        uint256 currentRewardPerToken = rewardPerToken();\\r\\n        uint256 pastRewards = s_rewards[account];\\r\\n        return((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) + pastRewards;\\r\\n    }\\r\\n\\r\\n    function transferTokens(uint256 _amount) public  {\\r\\n        s_userStakedAmount[msg.sender] =\\r\\n        s_userStakedAmount[msg.sender] + _amount;\\r\\n        s_totalSupply = s_totalSupply + _amount;\\r\\n\\r\\n        // myToken.mint(address(this), _amount);\\r\\n        // myToken.burn(msg.sender, _amount);\\r\\n        try myToken.transfer_(msg.sender,_amount){\\r\\n            emit Staked (msg.sender,_amount);\\r\\n        }catch{\\r\\n            revert stake__transferFailed();\\r\\n        }\\r\\n        anotherToken.mint(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function rewardPerTokenUpdate() public returns (uint256){\\r\\n        if (s_totalSupply == 0) {\\r\\n            return s_rewardPerTokenStored;\\r\\n        }\\r\\n        s_rewardPerTokenStored=s_rewardPerTokenStored +\\r\\n            (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) /\\r\\n                s_totalSupply);\\r\\n        s_lastUpdateTime = block.timestamp;\\r\\n                return s_rewardPerTokenStored;\\r\\n    }\\r\\n\\r\\n    function rewardPerToken() public view returns (uint256) {\\r\\n        if (s_totalSupply == 0) {\\r\\n            return s_rewardPerTokenStored;\\r\\n        }\\r\\n        return s_rewardPerTokenStored + (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) / s_totalSupply);\\r\\n    } \\r\\n\\r\\n \\r\\n    function unstake(uint256 amount) public {\\r\\n        require(s_userStakedAmount[msg.sender] >=amount, \\\"not enough LST\\\");\\r\\n        s_userStakedAmount[msg.sender] =\\r\\n                s_userStakedAmount[msg.sender] -\\r\\n                amount;\\r\\n        userData[msg.sender].push(entry(block.timestamp,amount,true));    \\r\\n        emit unboundingPeriodInitiated(msg.sender, amount,block.timestamp);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 requiredTimestamp)\\r\\n    payable \\r\\n    external\\r\\n    updateReward()\\r\\n    {   \\r\\n        entry[] memory user=userData[msg.sender];\\r\\n        uint256 userCount = userData[msg.sender].length;\\r\\n        entry[] memory temp = new entry[](userCount);\\r\\n        for(uint256 i =0 ; i < userCount; i++ ){\\r\\n            uint256 timestamp=user[i].timestamp;\\r\\n            uint256 amount = user[i].amount;\\r\\n            bool notCompleted = user[i].notCompleted;\\r\\n        if( block.timestamp-timestamp>=1000 && requiredTimestamp == timestamp && notCompleted){\\r\\n        try anotherToken.burn(msg.sender, amount) {\\r\\n            emit WithdrewStake(msg.sender, amount, block.timestamp); \\r\\n            withdrawTimeStamp[msg.sender] = block.timestamp;\\r\\n            s_totalSupply = s_totalSupply - amount;\\r\\n            // emit WithdrewStake(msg.sender, amount);\\r\\n            uint256 rpt=rewardPerToken();\\r\\n            amount=(amount * rpt) + amount;\\r\\n            myToken.mint(msg.sender, amount);\\r\\n            emit RewardsClaimed(msg.sender,amount);\\r\\n            temp[i]=entry(timestamp,amount,false);\\r\\n        } catch {\\r\\n            temp[i]=(entry(timestamp,amount,notCompleted));\\r\\n            emit WithdrewStake(msg.sender,amount,timestamp);\\r\\n            revert withdraw__transferFailed(); \\r\\n\\r\\n        }\\r\\n        }\\r\\n        else{\\r\\n            temp[i]=entry(timestamp,amount,notCompleted);\\r\\n        }\\r\\n        }\\r\\n            for(uint256 i = 0; i<userCount ; i++){\\r\\n                userData[msg.sender][i]=temp[i];\\r\\n            }\\r\\n    }\\r\\n\\r\\n\\r\\n    function getAnotherTokenBalance() public  view returns (uint256) {\\r\\n        return myToken.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getUserClaimableToken() public view returns(requiredData[] memory) {\\r\\n    requiredData[] memory data = new requiredData[](userData[msg.sender].length);\\r\\n\\r\\n    for (uint256 i = 0; i < userData[msg.sender].length; i++) {\\r\\n        uint256 timestamp = userData[msg.sender][i].timestamp;\\r\\n        uint256 amount = userData[msg.sender][i].amount;\\r\\n        bool claimable = block.timestamp - timestamp >= 1000;\\r\\n        data[i] = requiredData(timestamp, amount, claimable);\\r\\n    }\\r\\n    \\r\\n    return data;\\r\\n    }\\r\\n\\r\\n    function mintTokensForStacker(uint256 amount) public  {\\r\\n            myToken.mint(msg.sender, amount);\\r\\n    }\\r\\n    function getTotalSupply() public view returns(uint256){\\r\\n        return s_totalSupply;\\r\\n    }\\r\\n     function getRewardsPerTokenShared() public view returns(uint256){\\r\\n        return s_rewardPerTokenStored;\\r\\n    }\\r\\n     function getUserBalance() public view returns(uint256){\\r\\n        return s_userStakedAmount[msg.sender];\\r\\n    }\\r\\n\\r\\n     function getUserRewardsPerToken() public view returns(uint256){\\r\\n        return s_userRewardsPerToken_Paid[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getCurrentTimestamp() public view returns(uint256){\\r\\n        return block.timestamp;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x50c0bf08289e4055b90801217ffb4c2727cea0e6ed82aae02519620f2e01ba60\",\"license\":\"MIT\"},\"contracts/Restaking2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./Mytoken.sol\\\";\\r\\nimport \\\"./Mytoken2.sol\\\";\\r\\n\\r\\ncontract Restaking2 {\\r\\n    Mytoken public myToken;\\r\\n    Mytoken2 public anotherToken;\\r\\n    event Staked(address indexed user, uint256 indexed amount);\\r\\n    event WithdrewStake(address indexed user, uint256 indexed amount,uint256 indexed timestamp);\\r\\n    event RewardsClaimed(address indexed user, uint256 indexed amount);\\r\\n    event unboundingPeriodInitiated (address indexed user,uint256 indexed amount, uint256 indexed timestamp );\\r\\n    uint256 public RewardRate=100;\\r\\n    uint256 public s_totalSupply;\\r\\n    uint256 public s_lastUpdateTime; // everytime we call stake,withdraw,claim reward we need to update time;\\r\\n    uint256 public s_rewardPerTokenStored;\\r\\n    \\r\\n    //   uint256 public withdrawTimeStamp;\\r\\n\\r\\n    struct entry{\\r\\n        uint256 timestamp;\\r\\n        uint256 amount;\\r\\n        bool notCompleted;\\r\\n    }\\r\\n\\r\\n    struct requiredData{\\r\\n        uint256 timestamp;\\r\\n        uint256 amount;\\r\\n        bool claimable;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint256) s_userStakedAmount;\\r\\n    mapping(address => entry[]) userData;\\r\\n    mapping(address => uint256) s_rewards;\\r\\n    mapping(address => uint256) s_userRewardsPerToken_Paid;\\r\\n    mapping(address => uint256) withdrawTimeStamp;\\r\\n\\r\\n    modifier updateReward() {\\r\\n        s_lastUpdateTime = block.timestamp;\\r\\n        rewardPerTokenUpdate();\\r\\n        s_rewardPerTokenStored = rewardPerToken();\\r\\n        s_rewards[msg.sender] = earned(msg.sender);\\r\\n        s_userRewardsPerToken_Paid[msg.sender] = s_rewardPerTokenStored;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    error stake__transferFailed();\\r\\n    error withdraw__transferFailed();\\r\\n    error claimReward__transferFailed();\\r\\n    error staking__needMoreThanZero();\\r\\n    error waitingPeriod_notCompleted();\\r\\n    error unstakeNot_called();\\r\\n\\r\\n    constructor(Mytoken _myToken, Mytoken2 _anotherToken) {\\r\\n        myToken = _myToken;\\r\\n        anotherToken = _anotherToken;\\r\\n        s_lastUpdateTime = block.timestamp;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function earned(address account) public view returns (uint256) {\\r\\n        uint256 currentBalance = s_userStakedAmount[account];\\r\\n        uint256 amountPaid = s_userRewardsPerToken_Paid[account]; // used while claim reward function call\\r\\n        uint256 currentRewardPerToken = rewardPerToken();\\r\\n        uint256 pastRewards = s_rewards[account];\\r\\n        return((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) + pastRewards;\\r\\n    }\\r\\n\\r\\n    function transferTokens(uint256 _amount) public  {\\r\\n        s_userStakedAmount[msg.sender] =\\r\\n        s_userStakedAmount[msg.sender] + _amount;\\r\\n        s_totalSupply = s_totalSupply + _amount;\\r\\n\\r\\n        // myToken.mint(address(this), _amount);\\r\\n        // myToken.burn(msg.sender, _amount);\\r\\n        try myToken.transfer_(msg.sender,_amount){\\r\\n            emit Staked (msg.sender,_amount);\\r\\n        }catch{\\r\\n            revert stake__transferFailed();\\r\\n        }\\r\\n        anotherToken.mint(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function rewardPerTokenUpdate() public returns (uint256){\\r\\n        if (s_totalSupply == 0) {\\r\\n            return s_rewardPerTokenStored;\\r\\n        }\\r\\n        s_rewardPerTokenStored=s_rewardPerTokenStored +\\r\\n            (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) /\\r\\n                s_totalSupply);\\r\\n        s_lastUpdateTime = block.timestamp;\\r\\n                return s_rewardPerTokenStored;\\r\\n    }\\r\\n\\r\\n    function rewardPerToken() public view returns (uint256) {\\r\\n        if (s_totalSupply == 0) {\\r\\n            return s_rewardPerTokenStored;\\r\\n        }\\r\\n        return s_rewardPerTokenStored + (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) / s_totalSupply);\\r\\n    } \\r\\n\\r\\n \\r\\n    function unstake(uint256 amount) public {\\r\\n        require(s_userStakedAmount[msg.sender] >=amount, \\\"not enough LST\\\");\\r\\n        s_userStakedAmount[msg.sender] =\\r\\n                s_userStakedAmount[msg.sender] -\\r\\n                amount;\\r\\n        userData[msg.sender].push(entry(block.timestamp,amount,true));    \\r\\n        emit unboundingPeriodInitiated(msg.sender, amount,block.timestamp);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 requiredTimestamp)\\r\\n    payable \\r\\n    external\\r\\n    updateReward()\\r\\n    {   \\r\\n        entry[] memory user=userData[msg.sender];\\r\\n        uint256 userCount = userData[msg.sender].length;\\r\\n        entry[] memory temp = new entry[](userCount);\\r\\n        for(uint256 i =0 ; i < userCount; i++ ){\\r\\n            uint256 timestamp=user[i].timestamp;\\r\\n            uint256 amount = user[i].amount;\\r\\n            bool notCompleted = user[i].notCompleted;\\r\\n        if( block.timestamp-timestamp>=1000 && requiredTimestamp == timestamp && notCompleted){\\r\\n        try anotherToken.burn(msg.sender, amount) {\\r\\n            emit WithdrewStake(msg.sender, amount, block.timestamp); \\r\\n            withdrawTimeStamp[msg.sender] = block.timestamp;\\r\\n            s_totalSupply = s_totalSupply - amount;\\r\\n            // emit WithdrewStake(msg.sender, amount);\\r\\n            uint256 rpt=rewardPerToken();\\r\\n            amount=(amount * rpt) + amount;\\r\\n            myToken.mint(msg.sender, amount);\\r\\n            emit RewardsClaimed(msg.sender,amount);\\r\\n            temp[i]=entry(timestamp,0,false);\\r\\n        } catch {\\r\\n            temp[i]=(entry(timestamp,amount,notCompleted));\\r\\n            emit WithdrewStake(msg.sender,amount,timestamp);\\r\\n            revert withdraw__transferFailed(); \\r\\n\\r\\n        }\\r\\n        }\\r\\n        else{\\r\\n            temp[i]=entry(timestamp,amount,notCompleted);\\r\\n        }\\r\\n        }\\r\\n            for(uint256 i = 0; i<userCount ; i++){\\r\\n                userData[msg.sender][i]=temp[i];\\r\\n            }\\r\\n    }\\r\\n\\r\\n\\r\\n    function getAnotherTokenBalance() public  view returns (uint256) {\\r\\n        return myToken.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getUserClaimableToken() public view returns(requiredData[] memory) {\\r\\n    requiredData[] memory data = new requiredData[](userData[msg.sender].length);\\r\\n\\r\\n    for (uint256 i = 0; i < userData[msg.sender].length; i++) {\\r\\n        uint256 timestamp = userData[msg.sender][i].timestamp;\\r\\n        uint256 amount = userData[msg.sender][i].amount;\\r\\n        bool claimable = block.timestamp - timestamp >= 1000;\\r\\n        data[i] = requiredData(timestamp, amount, claimable);\\r\\n    }\\r\\n    \\r\\n    return data;\\r\\n    }\\r\\n\\r\\n    function mintTokensForStacker(uint256 amount) public  {\\r\\n            myToken.mint(msg.sender, amount);\\r\\n    }\\r\\n    function getTotalSupply() public view returns(uint256){\\r\\n        return s_totalSupply;\\r\\n    }\\r\\n     function getRewardsPerTokenShared() public view returns(uint256){\\r\\n        return s_rewardPerTokenStored;\\r\\n    }\\r\\n     function getUserBalance() public view returns(uint256){\\r\\n        return s_userStakedAmount[msg.sender];\\r\\n    }\\r\\n\\r\\n     function getUserRewardsPerToken() public view returns(uint256){\\r\\n        return s_userRewardsPerToken_Paid[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getCurrentTimestamp() public view returns(uint256){\\r\\n        return block.timestamp;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xfddcbfe0a96ec36d957cba76d71cbf75e40a13914bea77c0b1c2f8e2fa39ecca\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./Mytoken.sol\\\";\\r\\n// import \\\"./Token1.sol\\\";\\r\\n\\r\\ncontract Staking is ReentrancyGuard {\\r\\n    Mytoken public myToken;\\r\\n    //  MyToken public token;\\r\\n    constructor(Mytoken _token) {\\r\\n        myToken = _token;\\r\\n        s_lastUpdateTime=block.timestamp;\\r\\n\\r\\n    }\\r\\n    event Staked(address indexed user, uint256 indexed amount);\\r\\n    event WithdrewStake(address indexed user, uint256 indexed amount,uint256 indexed timstamp);\\r\\n    event RewardsClaimed(address indexed user, uint256 indexed amount);\\r\\n    event unboundingPeriodInitiated (address indexed user,uint256 indexed amount, uint256 indexed timestamp );\\r\\n\\r\\n    uint256 public RewardRate=100;\\r\\n    uint256 public s_totalSupply;\\r\\n    uint256 public s_lastUpdateTime; // everytime we call stake,withdraw,claim reward we need to update time;\\r\\n    uint256 public s_rewardPerTokenStored;\\r\\n    uint256 public unboundingPeriod = 1e18;\\r\\n    //   uint256 public withdrawTimeStamp;\\r\\n    \\r\\n        struct entry{\\r\\n        uint256 timestamp;\\r\\n        uint256 amount;\\r\\n        bool notCompleted;\\r\\n    }\\r\\n    struct requiredData{\\r\\n        uint256 timestamp;\\r\\n        uint256 amount;\\r\\n        bool claimable;\\r\\n    }\\r\\n    mapping(address => uint256) s_userStakedAmount;\\r\\n    mapping(address => uint256) s_rewards;\\r\\n    mapping(address => uint256) s_userRewardsPerToken_Paid;\\r\\n    mapping(address => uint256) withdrawTimeStamp;\\r\\n    mapping(address => entry[]) userData;\\r\\n\\r\\n\\r\\n    error stake__transferFailed();\\r\\n    error withdraw__transferFailed();\\r\\n    error claimReward__transferFailed();\\r\\n    error staking__needMoreThanZero();\\r\\n    error waitingPeriod_notCompleted();\\r\\n    error unstakeNot_called();\\r\\n\\r\\n    receive() external payable {}\\r\\n    fallback() external payable {}\\r\\n\\r\\n    modifier updateReward() {\\r\\n        s_lastUpdateTime = block.timestamp;\\r\\n        rewardPerTokenUpdate();\\r\\n        s_rewardPerTokenStored = rewardPerToken();\\r\\n        s_rewards[msg.sender] = earned(msg.sender);\\r\\n        s_userRewardsPerToken_Paid[msg.sender] = s_rewardPerTokenStored;\\r\\n        _;\\r\\n    }\\r\\n    function rewardPerTokenUpdate() public returns (uint256){\\r\\n        if (s_totalSupply == 0) {\\r\\n            return s_rewardPerTokenStored;\\r\\n        }\\r\\n        s_rewardPerTokenStored=s_rewardPerTokenStored +\\r\\n            (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) /\\r\\n                s_totalSupply);\\r\\n        s_lastUpdateTime = block.timestamp;\\r\\n                return s_rewardPerTokenStored;\\r\\n    }\\r\\n\\r\\n    modifier needMoreThanZero() {\\r\\n        if (msg.value == 0) {\\r\\n            revert staking__needMoreThanZero();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function earned(address account) public view returns (uint256) {\\r\\n        uint256 currentBalance = s_userStakedAmount[account];\\r\\n        uint256 amountPaid = s_userRewardsPerToken_Paid[account]; // used while claim reward function call\\r\\n        uint256 currentRewardPerToken = rewardPerToken();\\r\\n        uint256 pastRewards = s_rewards[account];\\r\\n        return\\r\\n            ((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) +\\r\\n            pastRewards;\\r\\n    }\\r\\n\\r\\n    function rewardPerToken() public view returns (uint256) {\\r\\n        if (s_totalSupply == 0) {\\r\\n            return s_rewardPerTokenStored;\\r\\n        }\\r\\n        return\\r\\n            s_rewardPerTokenStored +\\r\\n            (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) /\\r\\n                s_totalSupply);\\r\\n    }\\r\\n\\r\\n    function stake()\\r\\n        public \\r\\n        updateReward()\\r\\n        needMoreThanZero()\\r\\n        nonReentrant\\r\\n        payable \\r\\n    {   uint256 amount = msg.value;\\r\\n        s_userStakedAmount[msg.sender] =\\r\\n        s_userStakedAmount[msg.sender] +\\r\\n            amount;\\r\\n        s_totalSupply = s_totalSupply + amount;\\r\\n        (bool sent, ) = (payable(address(this))).call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to take ether\\\");\\r\\n        uint256 staked_tokens=(93)*(amount)/100;\\r\\n        myToken.mint(msg.sender, staked_tokens);\\r\\n\\r\\n        emit Staked(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 amount) public {\\r\\n        require(s_userStakedAmount[msg.sender] >=amount, \\\"not enough eth staked\\\");\\r\\n        s_userStakedAmount[msg.sender] =\\r\\n                s_userStakedAmount[msg.sender] -\\r\\n                amount;\\r\\n        userData[msg.sender].push(entry(block.timestamp,amount,true));\\r\\n        emit unboundingPeriodInitiated(msg.sender, amount,block.timestamp);\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdraw(uint256 requiredTimestamp)\\r\\n        external\\r\\n        updateReward()\\r\\n        // needMoreThanZero()\\r\\n    {   \\r\\n         entry[] memory user=userData[msg.sender];\\r\\n        uint256 userCount = userData[msg.sender].length;\\r\\n        entry[] memory temp = new entry[](userCount);\\r\\n        for(uint256 i =0 ; i < userCount; i++ ){\\r\\n            uint256 timestamp=user[i].timestamp;\\r\\n            uint256 amount = user[i].amount;\\r\\n            bool notCompleted = user[i].notCompleted;\\r\\n        if( block.timestamp-timestamp>=10 && requiredTimestamp == timestamp && notCompleted){\\r\\n        withdrawTimeStamp[msg.sender] = block.timestamp;\\r\\n        s_totalSupply = s_totalSupply - amount;\\r\\n        try myToken.burn(msg.sender, amount) {\\r\\n            emit WithdrewStake(msg.sender, amount, block.timestamp); \\r\\n            withdrawTimeStamp[msg.sender] = block.timestamp;\\r\\n            s_totalSupply = s_totalSupply - amount;\\r\\n            // emit WithdrewStake(msg.sender, amount);\\r\\n            uint256 rpt=rewardPerToken();\\r\\n            amount=(amount * rpt) + amount;\\r\\n            amount = (amount*100)/93;\\r\\n            (bool sent, ) = (payable(msg.sender)).call{value: amount}(\\\"\\\");\\r\\n            require(sent, \\\"Failed to send Ether\\\");\\r\\n            emit RewardsClaimed(msg.sender,amount);\\r\\n        }\\r\\n        catch {\\r\\n            temp[i]=(entry(timestamp,amount,notCompleted));\\r\\n            revert withdraw__transferFailed(); \\r\\n        }\\r\\n        }\\r\\n        else{\\r\\n            revert unstakeNot_called();\\r\\n        }\\r\\n        }\\r\\n            for(uint256 i = 0; i<userCount ; i++){\\r\\n                userData[msg.sender][i]=temp[i];\\r\\n            }\\r\\n    }\\r\\n    function getUserClaimableToken() public view returns(requiredData[] memory) {\\r\\n        requiredData[] memory data = new requiredData[](userData[msg.sender].length);\\r\\n\\r\\n        for (uint256 i = 0; i < userData[msg.sender].length; i++) {\\r\\n            uint256 timestamp = userData[msg.sender][i].timestamp;\\r\\n            uint256 amount = userData[msg.sender][i].amount;\\r\\n            bool claimable = block.timestamp - timestamp >= 10;\\r\\n            data[i] = requiredData(timestamp, amount, claimable);\\r\\n    }\\r\\n    \\r\\n    return data;\\r\\n    }\\r\\n\\r\\n    function getTotalSupply() public view returns(uint256){\\r\\n        return s_totalSupply;\\r\\n    }\\r\\n    function getRewardsPerTokenShared() public view returns(uint256){\\r\\n        return s_rewardPerTokenStored;\\r\\n    }\\r\\n    function getBlockTimestamp() public view returns(uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n    function getUserBalance() public view returns(uint256){\\r\\n        return s_userStakedAmount[msg.sender];\\r\\n    }\\r\\n    function getUserRewardsPerToken() public view returns(uint256){\\r\\n        return s_userRewardsPerToken_Paid[msg.sender];\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xbc884e3cd9c35974f9d706b177c6656fd99c15d4b288c40017b4133fd6b9ebf4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001202380380620012028339818101604052810190620000379190620003b3565b856000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050506200044f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001fa82620001cd565b9050919050565b60006200020e82620001ed565b9050919050565b620002208162000201565b81146200022c57600080fd5b50565b600081519050620002408162000215565b92915050565b60006200025382620001ed565b9050919050565b620002658162000246565b81146200027157600080fd5b50565b60008151905062000285816200025a565b92915050565b60006200029882620001ed565b9050919050565b620002aa816200028b565b8114620002b657600080fd5b50565b600081519050620002ca816200029f565b92915050565b6000620002dd82620001cd565b9050919050565b6000620002f182620002d0565b9050919050565b6200030381620002e4565b81146200030f57600080fd5b50565b6000815190506200032381620002f8565b92915050565b60006200033682620001ed565b9050919050565b620003488162000329565b81146200035457600080fd5b50565b60008151905062000368816200033d565b92915050565b60006200037b82620001ed565b9050919050565b6200038d816200036e565b81146200039957600080fd5b50565b600081519050620003ad8162000382565b92915050565b60008060008060008060c08789031215620003d357620003d2620001c8565b5b6000620003e389828a016200022f565b9650506020620003f689828a0162000274565b95505060406200040989828a01620002b9565b94505060606200041c89828a0162000312565b93505060806200042f89828a0162000357565b92505060a06200044289828a016200039c565b9150509295509295509295565b610da3806200045f6000396000f3fe6080604052600436106100865760003560e01c80639eb9f0c4116100595780639eb9f0c414610135578063b8fcf9371461013f578063be8173b91461016a578063d2ad6e8c14610174578063eb1efe0a1461019f57610086565b80631e097ca91461008b5780634bd989ca146100b65780634cf088d9146100df5780637f07de741461010a575b600080fd5b34801561009757600080fd5b506100a06101ca565b6040516100ad9190610967565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d891906109bd565b6101f0565b005b3480156100eb57600080fd5b506100f4610280565b6040516101019190610a1d565b60405180910390f35b34801561011657600080fd5b5061011f6102a6565b60405161012c9190610a59565b60405180910390f35b61013d6102cc565b005b34801561014b57600080fd5b506101546105a2565b6040516101619190610a95565b60405180910390f35b6101726105c6565b005b34801561018057600080fd5b5061018961089c565b6040516101969190610ad1565b60405180910390f35b3480156101ab57600080fd5b506101b46108c2565b6040516101c19190610b0d565b60405180910390f35b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b815260040161024b929190610b58565b600060405180830381600087803b15801561026557600080fd5b505af1158015610279573d6000803e3d6000fd5b5050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166002346103149190610bb0565b6040516024016040516020818303038152906040527f3a4b66f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103a49190610c52565b60006040518083038185875af1925050503d80600081146103e1576040519150601f19603f3d011682016040523d82523d6000602084013e6103e6565b606091505b505090508061042a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042190610cc6565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166002346104709190610bb0565b60023461047d9190610bb0565b60405160240161048d9190610ce6565b6040516020818303038152906040527ffd9a4e61000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105179190610c52565b60006040518083038185875af1925050503d8060008114610554576040519150601f19603f3d011682016040523d82523d6000602084013e610559565b606091505b5050809150508061059f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059690610d4d565b60405180910390fd5b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660023461060e9190610bb0565b6040516024016040516020818303038152906040527f3a4b66f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161069e9190610c52565b60006040518083038185875af1925050503d80600081146106db576040519150601f19603f3d011682016040523d82523d6000602084013e6106e0565b606091505b5050905080610724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071b90610cc6565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660023461076a9190610bb0565b6002346107779190610bb0565b6040516024016107879190610ce6565b6040516020818303038152906040527ffd9a4e61000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108119190610c52565b60006040518083038185875af1925050503d806000811461084e576040519150601f19603f3d011682016040523d82523d6000602084013e610853565b606091505b50508091505080610899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089090610d4d565b60405180910390fd5b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061092d610928610923846108e8565b610908565b6108e8565b9050919050565b600061093f82610912565b9050919050565b600061095182610934565b9050919050565b61096181610946565b82525050565b600060208201905061097c6000830184610958565b92915050565b600080fd5b6000819050919050565b61099a81610987565b81146109a557600080fd5b50565b6000813590506109b781610991565b92915050565b6000602082840312156109d3576109d2610982565b5b60006109e1848285016109a8565b91505092915050565b60006109f582610912565b9050919050565b6000610a07826109ea565b9050919050565b610a17816109fc565b82525050565b6000602082019050610a326000830184610a0e565b92915050565b6000610a4382610934565b9050919050565b610a5381610a38565b82525050565b6000602082019050610a6e6000830184610a4a565b92915050565b6000610a7f82610934565b9050919050565b610a8f81610a74565b82525050565b6000602082019050610aaa6000830184610a86565b92915050565b6000610abb82610934565b9050919050565b610acb81610ab0565b82525050565b6000602082019050610ae66000830184610ac2565b92915050565b6000610af782610934565b9050919050565b610b0781610aec565b82525050565b6000602082019050610b226000830184610afe565b92915050565b6000610b33826108e8565b9050919050565b610b4381610b28565b82525050565b610b5281610987565b82525050565b6000604082019050610b6d6000830185610b3a565b610b7a6020830184610b49565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bbb82610987565b9150610bc683610987565b925082610bd657610bd5610b81565b5b828204905092915050565b600081519050919050565b600081905092915050565b60005b83811015610c15578082015181840152602081019050610bfa565b60008484015250505050565b6000610c2c82610be1565b610c368185610bec565b9350610c46818560208601610bf7565b80840191505092915050565b6000610c5e8284610c21565b915081905092915050565b600082825260208201905092915050565b7f5374616b696e67206661696c6564000000000000000000000000000000000000600082015250565b6000610cb0600e83610c69565b9150610cbb82610c7a565b602082019050919050565b60006020820190508181036000830152610cdf81610ca3565b9050919050565b6000602082019050610cfb6000830184610b49565b92915050565b7f52655374616b696e67206661696c656400000000000000000000000000000000600082015250565b6000610d37601083610c69565b9150610d4282610d01565b602082019050919050565b60006020820190508181036000830152610d6681610d2a565b905091905056fea2646970667358221220f2ddd7fd873842bd899442fe1bd5c73f3e6b9f8dbe07d7f7ee7531725a2e853764736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80639eb9f0c4116100595780639eb9f0c414610135578063b8fcf9371461013f578063be8173b91461016a578063d2ad6e8c14610174578063eb1efe0a1461019f57610086565b80631e097ca91461008b5780634bd989ca146100b65780634cf088d9146100df5780637f07de741461010a575b600080fd5b34801561009757600080fd5b506100a06101ca565b6040516100ad9190610967565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d891906109bd565b6101f0565b005b3480156100eb57600080fd5b506100f4610280565b6040516101019190610a1d565b60405180910390f35b34801561011657600080fd5b5061011f6102a6565b60405161012c9190610a59565b60405180910390f35b61013d6102cc565b005b34801561014b57600080fd5b506101546105a2565b6040516101619190610a95565b60405180910390f35b6101726105c6565b005b34801561018057600080fd5b5061018961089c565b6040516101969190610ad1565b60405180910390f35b3480156101ab57600080fd5b506101b46108c2565b6040516101c19190610b0d565b60405180910390f35b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b815260040161024b929190610b58565b600060405180830381600087803b15801561026557600080fd5b505af1158015610279573d6000803e3d6000fd5b5050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166002346103149190610bb0565b6040516024016040516020818303038152906040527f3a4b66f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103a49190610c52565b60006040518083038185875af1925050503d80600081146103e1576040519150601f19603f3d011682016040523d82523d6000602084013e6103e6565b606091505b505090508061042a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042190610cc6565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166002346104709190610bb0565b60023461047d9190610bb0565b60405160240161048d9190610ce6565b6040516020818303038152906040527ffd9a4e61000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105179190610c52565b60006040518083038185875af1925050503d8060008114610554576040519150601f19603f3d011682016040523d82523d6000602084013e610559565b606091505b5050809150508061059f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059690610d4d565b60405180910390fd5b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660023461060e9190610bb0565b6040516024016040516020818303038152906040527f3a4b66f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161069e9190610c52565b60006040518083038185875af1925050503d80600081146106db576040519150601f19603f3d011682016040523d82523d6000602084013e6106e0565b606091505b5050905080610724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071b90610cc6565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660023461076a9190610bb0565b6002346107779190610bb0565b6040516024016107879190610ce6565b6040516020818303038152906040527ffd9a4e61000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108119190610c52565b60006040518083038185875af1925050503d806000811461084e576040519150601f19603f3d011682016040523d82523d6000602084013e610853565b606091505b50508091505080610899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089090610d4d565b60405180910390fd5b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061092d610928610923846108e8565b610908565b6108e8565b9050919050565b600061093f82610912565b9050919050565b600061095182610934565b9050919050565b61096181610946565b82525050565b600060208201905061097c6000830184610958565b92915050565b600080fd5b6000819050919050565b61099a81610987565b81146109a557600080fd5b50565b6000813590506109b781610991565b92915050565b6000602082840312156109d3576109d2610982565b5b60006109e1848285016109a8565b91505092915050565b60006109f582610912565b9050919050565b6000610a07826109ea565b9050919050565b610a17816109fc565b82525050565b6000602082019050610a326000830184610a0e565b92915050565b6000610a4382610934565b9050919050565b610a5381610a38565b82525050565b6000602082019050610a6e6000830184610a4a565b92915050565b6000610a7f82610934565b9050919050565b610a8f81610a74565b82525050565b6000602082019050610aaa6000830184610a86565b92915050565b6000610abb82610934565b9050919050565b610acb81610ab0565b82525050565b6000602082019050610ae66000830184610ac2565b92915050565b6000610af782610934565b9050919050565b610b0781610aec565b82525050565b6000602082019050610b226000830184610afe565b92915050565b6000610b33826108e8565b9050919050565b610b4381610b28565b82525050565b610b5281610987565b82525050565b6000604082019050610b6d6000830185610b3a565b610b7a6020830184610b49565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bbb82610987565b9150610bc683610987565b925082610bd657610bd5610b81565b5b828204905092915050565b600081519050919050565b600081905092915050565b60005b83811015610c15578082015181840152602081019050610bfa565b60008484015250505050565b6000610c2c82610be1565b610c368185610bec565b9350610c46818560208601610bf7565b80840191505092915050565b6000610c5e8284610c21565b915081905092915050565b600082825260208201905092915050565b7f5374616b696e67206661696c6564000000000000000000000000000000000000600082015250565b6000610cb0600e83610c69565b9150610cbb82610c7a565b602082019050919050565b60006020820190508181036000830152610cdf81610ca3565b9050919050565b6000602082019050610cfb6000830184610b49565b92915050565b7f52655374616b696e67206661696c656400000000000000000000000000000000600082015250565b6000610d37601083610c69565b9150610d4282610d01565b602082019050919050565b60006020820190508181036000830152610d6681610d2a565b905091905056fea2646970667358221220f2ddd7fd873842bd899442fe1bd5c73f3e6b9f8dbe07d7f7ee7531725a2e853764736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 796,
        "contract": "contracts/Autostaking.sol:Autostaking",
        "label": "myToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Mytoken)1615"
      },
      {
        "astId": 799,
        "contract": "contracts/Autostaking.sol:Autostaking",
        "label": "myToken1",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Mytoken1)1674"
      },
      {
        "astId": 802,
        "contract": "contracts/Autostaking.sol:Autostaking",
        "label": "myToken2",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Mytoken2)1733"
      },
      {
        "astId": 805,
        "contract": "contracts/Autostaking.sol:Autostaking",
        "label": "staking",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Staking)3958"
      },
      {
        "astId": 808,
        "contract": "contracts/Autostaking.sol:Autostaking",
        "label": "restaking1",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(Restaking1)2469"
      },
      {
        "astId": 811,
        "contract": "contracts/Autostaking.sol:Autostaking",
        "label": "restaking2",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(Restaking2)3201"
      }
    ],
    "types": {
      "t_contract(Mytoken)1615": {
        "encoding": "inplace",
        "label": "contract Mytoken",
        "numberOfBytes": "20"
      },
      "t_contract(Mytoken1)1674": {
        "encoding": "inplace",
        "label": "contract Mytoken1",
        "numberOfBytes": "20"
      },
      "t_contract(Mytoken2)1733": {
        "encoding": "inplace",
        "label": "contract Mytoken2",
        "numberOfBytes": "20"
      },
      "t_contract(Restaking1)2469": {
        "encoding": "inplace",
        "label": "contract Restaking1",
        "numberOfBytes": "20"
      },
      "t_contract(Restaking2)3201": {
        "encoding": "inplace",
        "label": "contract Restaking2",
        "numberOfBytes": "20"
      },
      "t_contract(Staking)3958": {
        "encoding": "inplace",
        "label": "contract Staking",
        "numberOfBytes": "20"
      }
    }
  }
}